package org.example.betty.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class MVPVoting extends Contract {
    public static final String BINARY = "0x60806040523461002757610011610037565b61001961002c565b613470610211823961347090f35b610032565b60405190565b600080fd5b610040336100aa565b565b90565b60018060a01b031690565b90565b61006761006261006c92610042565b610050565b610045565b90565b61007890610053565b90565b61008490610045565b90565b6100909061007b565b9052565b91906100a890600060208501940190610087565b565b806100c66100c06100bb600061006f565b61007b565b9161007b565b146100d6576100d4906101af565b565b6100fb6100e3600061006f565b6000918291631e4fbdf760e01b835260048301610094565b0390fd5b60001c90565b60018060a01b031690565b61011c610121916100ff565b610105565b90565b61012e9054610110565b90565b60001b90565b9061014860018060a01b0391610131565b9181191691161790565b61016661016161016b92610045565b610050565b610045565b90565b61017790610152565b90565b6101839061016e565b90565b90565b9061019e6101996101a59261017a565b610186565b8254610137565b9055565b60000190565b6101b96000610124565b6101c4826000610189565b906101f86101f27f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361017a565b9161017a565b9161020161002c565b8061020b816101a9565b0390a356fe60806040526004361015610013575b610c7d565b61001e60003561014d565b806303c7881a14610148578063079abde614610143578063117a5b901461013e5780632233a581146101395780632af8ab3e1461013457806338bb3c531461012f578063390526191461012a578063715018a6146101255780638da5cb5b146101205780638f72ef861461011b57806392910a8a1461011657806395bc638f14610111578063bc0e36e91461010c578063c40ed85914610107578063d23254b414610102578063d6ca24e7146100fd578063dc98a21a146100f8578063f2fde38b146100f35763fbc0a90a0361000e57610c48565b610c15565b610bc0565b610b3b565b610b01565b610a06565b6108c8565b610893565b61085f565b6107f0565b6107bb565b610788565b61073c565b61066d565b610637565b6105d3565b6104d1565b61035d565b610263565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b90565b61017481610168565b0361017b57565b600080fd5b9050359061018d8261016b565b565b60018060a01b031690565b6101a39061018f565b90565b6101af8161019a565b036101b657565b600080fd5b905035906101c8826101a6565b565b91906040838203126101f357806101e76101f09260008601610180565b936020016101bb565b90565b61015e565b61020190610168565b9052565b61020e9061019a565b9052565b151590565b61022090610212565b9052565b61025a61026194610250606094989795610246608086019a60008701906101f8565b60208501906101f8565b6040830190610205565b0190610217565b565b346102985761029461027f6102793660046101ca565b90610c94565b9061028b949294610153565b94859485610224565b0390f35b610159565b906020828203126102b7576102b491600001610180565b90565b61015e565b5190565b60209181520190565b60200190565b6102d89061019a565b9052565b906102e9816020936102cf565b0190565b60200190565b9061031061030a610303846102bc565b80936102c0565b926102c9565b9060005b8181106103215750505090565b90919261033a61033460019286516102dc565b946102ed565b9101919091610314565b61035a91602082019160008184039101526102f3565b90565b3461038d5761038961037861037336600461029d565b610e2f565b610380610153565b91829182610344565b0390f35b610159565b90565b6103a96103a46103ae92610168565b610392565b610168565b90565b906103bb90610395565b600052602052604060002090565b60001c90565b90565b6103de6103e3916103c9565b6103cf565b90565b6103f090546103d2565b90565b60ff1690565b61040561040a916103c9565b6103f3565b90565b61041790546103f9565b90565b6104259060016103b1565b90610432600083016103e6565b9161043f6001820161040d565b9161044c600283016103e6565b91610459600382016103e6565b91610472600561046b600485016103e6565b93016103e6565b90565b91946104be6104c8929897956104b460a0966104aa6104cf9a6104a060c08a019e60008b01906101f8565b6020890190610217565b60408701906101f8565b60608501906101f8565b60808301906101f8565b01906101f8565b565b34610508576105046104ec6104e736600461029d565b61041a565b926104fb969496929192610153565b96879687610475565b0390f35b610159565b9061051790610395565b600052602052604060002090565b61053961053461053e9261018f565b610392565b61018f565b90565b61054a90610525565b90565b61055690610541565b90565b906105639061054d565b600052602052604060002090565b1c90565b61058590600861058a9302610571565b6103cf565b90565b906105989154610575565b90565b6105b56105ba926105b060059360009461050d565b610559565b61058d565b90565b91906105d1906000602085019401906101f8565b565b34610604576106006105ef6105e93660046101ca565b9061059b565b6105f7610153565b918291826105bd565b0390f35b610159565b9190604083820312610632578061062661062f9260008601610180565b93602001610180565b90565b61015e565b346106685761066461065361064d366004610609565b90610e4e565b61065b610153565b918291826105bd565b0390f35b610159565b3461069e5761069a610689610683366004610609565b90610e8e565b610691610153565b91829182610344565b0390f35b610159565b906106ad90610395565b600052602052604060002090565b906106c590610395565b600052602052604060002090565b60018060a01b031690565b6106ee9060086106f39302610571565b6106d3565b90565b9061070191546106de565b90565b61071e610723926107196002936000946106a3565b6106bb565b6106f6565b90565b919061073a90600060208501940190610205565b565b3461076d57610769610758610752366004610609565b90610704565b610760610153565b91829182610726565b0390f35b610159565b600091031261077d57565b61015e565b60000190565b346107b657610798366004610772565b6107a0610f07565b6107a8610153565b806107b281610782565b0390f35b610159565b346107eb576107cb366004610772565b6107e76107d6610f11565b6107de610153565b91829182610726565b0390f35b610159565b3461081f57610809610803366004610609565b90611299565b610811610153565b8061081b81610782565b0390f35b610159565b909160608284031261085a576108576108408460008501610180565b9361084e8160208601610180565b93604001610180565b90565b61015e565b3461088e57610878610872366004610824565b91611839565b610880610153565b8061088a81610782565b0390f35b610159565b346108c3576108bf6108ae6108a936600461029d565b611cef565b6108b6610153565b91829182610344565b0390f35b610159565b346108f7576108e16108db3660046101ca565b90611fd4565b6108e9610153565b806108f381610782565b0390f35b610159565b600080fd5b600080fd5b600080fd5b909182601f830112156109455781359167ffffffffffffffff831161094057602001926020830284011161093b57565b610906565b610901565b6108fc565b909182601f830112156109845781359167ffffffffffffffff831161097f57602001926020830284011161097a57565b610906565b610901565b6108fc565b9190608083820312610a01576109a28160008501610180565b92602081013567ffffffffffffffff81116109fc57826109c391830161090b565b929093604083013567ffffffffffffffff81116109f7576109e9836109f492860161094a565b939094606001610180565b90565b610163565b610163565b61015e565b34610a3b57610a25610a19366004610989565b949390939291926125a7565b610a2d610153565b80610a3781610782565b0390f35b610159565b90610a4a90610395565b600052602052604060002090565b90610a629061054d565b600052602052604060002090565b610a7c610a81916103c9565b6106d3565b90565b610a8e9054610a70565b90565b60a01c90565b610aa3610aa891610a91565b6103f3565b90565b610ab59054610a97565b90565b90610ac7610acc926004610a40565b610a58565b90610ad9600083016103e6565b91610ae6600182016103e6565b91610afe6002610af7818501610a84565b9301610aab565b90565b34610b3657610b32610b1d610b173660046101ca565b90610ab8565b90610b29949294610153565b94859485610224565b0390f35b610159565b34610b6957610b53610b4e36600461029d565b6125b7565b610b5b610153565b80610b6581610782565b0390f35b610159565b90610b7890610395565b600052602052604060002090565b90610b9090610395565b600052602052604060002090565b610bb8610bbd92610bb3600393600094610b6e565b610b86565b61058d565b90565b34610bf157610bed610bdc610bd6366004610609565b90610b9e565b610be4610153565b918291826105bd565b0390f35b610159565b90602082820312610c1057610c0d916000016101bb565b90565b61015e565b34610c4357610c2d610c28366004610bf6565b61262c565b610c35610153565b80610c3f81610782565b0390f35b610159565b34610c7857610c74610c63610c5e36600461029d565b612637565b610c6b610153565b91829182610344565b0390f35b610159565b600080fd5b600090565b600090565b600090565b90565b610cd491610cca610ccf92610ca7610c82565b50610cb0610c82565b50610cb9610c87565b50610cc2610c8c565b506004610a40565b610a58565b610c91565b610ce0600082016103e6565b610cec600183016103e6565b92610d046002610cfd818601610a84565b9401610aab565b9193929190565b606090565b90610d1a90610395565b600052602052604060002090565b5490565b60209181520190565b600052602060002090565b610d4a9054610a70565b90565b60010190565b90610d70610d6a610d6384610d28565b8093610d2c565b92610d35565b9060005b818110610d815750505090565b909192610da1610d9b600192610d9687610d40565b6102dc565b94610d4d565b9101919091610d74565b90610db591610d53565b90565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90610de290610db8565b810190811067ffffffffffffffff821117610dfc57604052565b610dc2565b90610e21610e1a92610e11610153565b93848092610dab565b0383610dd8565b565b610e2c90610e01565b90565b610e46610e4b91610e3e610d0b565b506007610d10565b610e23565b90565b610e7391610e69610e6e92610e61610c82565b506003610b6e565b610b86565b6103e6565b90565b90610e8090610395565b600052602052604060002090565b610eb391610ea9610eae92610ea1610d0b565b506006610e76565b610d10565b610e23565b90565b610ebe6126bd565b610ec6610ef3565b565b90565b610edf610eda610ee492610ec8565b610392565b61018f565b90565b610ef090610ecb565b90565b610f05610f006000610ee7565b61270c565b565b610f0f610eb6565b565b610f19610c87565b50610f246000610a84565b90565b90610f3991610f346126bd565b611174565b565b90565b610f52610f4d610f5792610ec8565b610392565b610168565b90565b60209181520190565b60007f47616d6520646f6573206e6f7420657869737400000000000000000000000000910152565b610f986013602092610f5a565b610fa181610f63565b0190565b610fbb9060208101906000818303910152610f8b565b90565b15610fc557565b610fcd610153565b62461bcd60e51b815280610fe360048201610fa5565b0390fd5b60007f47616d6520616c72656164792066696e616c697a656400000000000000000000910152565b61101c6016602092610f5a565b61102581610fe7565b0190565b61103f906020810190600081830391015261100f565b90565b1561104957565b611051610153565b62461bcd60e51b81528061106760048201611029565b0390fd5b60007f496e76616c696420706c61796572204944000000000000000000000000000000910152565b6110a06011602092610f5a565b6110a98161106b565b0190565b6110c39060208101906000818303910152611093565b90565b156110cd57565b6110d5610153565b62461bcd60e51b8152806110eb600482016110ad565b0390fd5b60001b90565b9061110160ff916110ef565b9181191691161790565b61111490610212565b90565b90565b9061112f61112a6111369261110b565b611117565b82546110f5565b9055565b90611147600019916110ef565b9181191691161790565b90565b9061116961116461117092610395565b611151565b825461113a565b9055565b61125561118b611186600184906103b1565b610f3b565b6111b461119a600083016103e6565b6111ad6111a76000610f3e565b91610168565b1415610fbe565b6111d16111cc6111c66001840161040d565b15610212565b611042565b6112146111f26111ed6111e6600287906106a3565b87906106bb565b610a84565b61120d6112076112026000610ee7565b61019a565b9161019a565b14156110c6565b611221600180830161111a565b61122e8460028301611154565b600561124e61124961124260038790610b6e565b8790610b86565b6103e6565b9101611154565b6112946112827f95cafc5afb966ddf794e602896ba992d099b1e8a0d86b8418532ead82af3ea0f92610395565b9261128b610153565b918291826105bd565b0390a2565b906112a391610f27565b565b60007f566f74696e6720636c6f73656400000000000000000000000000000000000000910152565b6112da600d602092610f5a565b6112e3816112a5565b0190565b6112fd90602081019060008183039101526112cd565b90565b1561130757565b61130f610153565b62461bcd60e51b815280611325600482016112e7565b0390fd5b60007f416c726561647920766f74656400000000000000000000000000000000000000910152565b61135e600d602092610f5a565b61136781611329565b0190565b6113819060208101906000818303910152611351565b90565b1561138b57565b611393610153565b62461bcd60e51b8152806113a96004820161136b565b0390fd5b60007f416d6f756e74206d7573742062652067726561746572207468616e2030000000910152565b6113e2601d602092610f5a565b6113eb816113ad565b0190565b61140590602081019060008183039101526113d5565b90565b1561140f57565b611417610153565b62461bcd60e51b81528061142d600482016113ef565b0390fd5b61143a90610525565b90565b61144690611431565b90565b61145290610541565b90565b61145e90610541565b90565b60e01b90565b61147081610212565b0361147757565b600080fd5b9050519061148982611467565b565b906020828203126114a5576114a29160000161147c565b90565b61015e565b6040906114d46114db94969593966114ca60608401986000850190610205565b6020830190610205565b01906101f8565b565b6114e5610153565b3d6000823e3d90fd5b60007f546f6b656e207472616e73666572206661696c65640000000000000000000000910152565b6115236015602092610f5a565b61152c816114ee565b0190565b6115469060208101906000818303910152611516565b90565b1561155057565b611558610153565b62461bcd60e51b81528061156e60048201611530565b0390fd5b9061158561157e610153565b9283610dd8565b565b6115916080611572565b90565b9061159e90610168565b9052565b906115ac9061019a565b9052565b906115ba90610212565b9052565b6115c89051610168565b90565b6115d5905161019a565b90565b906115e960018060a01b03916110ef565b9181191691161790565b90565b9061160b6116066116129261054d565b6115f3565b82546115d8565b9055565b6116209051610212565b90565b60a01b90565b9061163860ff60a01b91611623565b9181191691161790565b9061165761165261165e9261110b565b611117565b8254611629565b9055565b906116c0606060026116c69461168760008201611681600088016115be565b90611154565b6116a06001820161169a602088016115be565b90611154565b6116b88282016116b2604088016115cb565b906115f6565b019201611616565b90611642565b565b906116d291611662565b565b634e487b7160e01b600052601160045260246000fd5b6116f96116ff91939293610168565b92610168565b820180921161170a57565b6116d4565b90565b600052602060002090565b634e487b7160e01b600052603260045260246000fd5b5490565b61174081611733565b82101561175b57611752600191611712565b91020190600090565b61171d565b1b90565b9190600861178491029161177e60018060a01b0384611760565b92611760565b9181191691161790565b91906117a461179f6117ac9361054d565b6115f3565b908354611764565b9055565b90815491680100000000000000008310156117e057826117d89160016117de95018155611737565b9061178e565b565b610dc2565b906117ef90610395565b600052602052604060002090565b906118079061054d565b600052602052604060002090565b916020611837929493611830604082019660008301906101f8565b01906101f8565b565b61184d611848600183906103b1565b610f3b565b61187661185c600083016103e6565b61186f6118696000610f3e565b91610168565b1415610fbe565b61189361188e6118886001840161040d565b15610212565b611042565b6118ba426118b46118ae6118a9600386016103e6565b610168565b91610168565b10611300565b6118f76118de60006118d86118d160048790610a40565b3390610a58565b016103e6565b6118f16118eb6000610f3e565b91610168565b14611384565b6119148461190e6119086000610f3e565b91610168565b11611408565b61193261192d611926600285906106a3565b85906106bb565b610a84565b906119598261195261194c6119476000610ee7565b61019a565b9161019a565b14156110c6565b61196a6119658361143d565b611449565b9160206323b872dd93339061199c600061198330611455565b976119a78c611990610153565b9a8b9788968795611461565b8552600485016114aa565b03925af1908115611bba576119cb611a8892611aa595600091611b8c575b50611549565b611a2887611a0d88611a04856119fb6000936119f26119e8611587565b9760008901611594565b60208701611594565b604085016115a2565b606083016115b0565b611a23611a1c60048990610a40565b3390610a58565b6116c8565b611a5a87611a54611a45611a3e60038a90610b6e565b8a90610b86565b91611a4f836103e6565b6116ea565b90611154565b611a82611a738892611a6e6005899061050d565b610559565b91611a7d836103e6565b6116ea565b90611154565b611a9f600486920191611a9a836103e6565b6116ea565b90611154565b611acd611ac6611ac1611aba60068590610e76565b8590610d10565b61170f565b33906117b0565b611af4611aee611ae9611ae2600885906117e5565b33906117fd565b61040d565b15610212565b611b49575b339192611b2f611b297ffe6af831d2af990375be90c3fd500ead6aae60d5d698d4518f4f9bc9c1233ba593610395565b9361054d565b93611b44611b3b610153565b92839283611815565b0390a3565b611b67611b60611b5b60078490610d10565b61170f565b33906117b0565b611b876001611b82611b7b600885906117e5565b33906117fd565b61111a565b611af9565b611bad915060203d8111611bb3575b611ba58183610dd8565b81019061148b565b386119c5565b503d611b9b565b6114dd565b60007f47616d65206e6f742066696e616c697a65640000000000000000000000000000910152565b611bf46012602092610f5a565b611bfd81611bbf565b0190565b611c179060208101906000818303910152611be7565b90565b15611c2157565b611c29610153565b62461bcd60e51b815280611c3f60048201611c01565b0390fd5b6001611c4f9101610168565b90565b90611c5c826102bc565b811015611c6d576020809102010190565b61171d565b611c7b90610168565b6000198114611c8a5760010190565b6116d4565b67ffffffffffffffff8111611ca75760208091020190565b610dc2565b90611cbe611cb983611c8f565b611572565b918252565b369037565b90611ced611cd583611cac565b92602080611ce38693611c8f565b9201910390611cc3565b565b611cf7610d0b565b50611d85611d80611d12611d0d600185906103b1565b610f3b565b611d3b611d21600083016103e6565b611d34611d2e6000610f3e565b91610168565b1415610fbe565b611d4f611d4a6001830161040d565b611c1a565b611d7a6002611d73611d6b611d6660078990610d10565b610e23565b966006610e76565b92016103e6565b90610d10565b610e23565b611d8f6000610f3e565b90611d9a6000610f3e565b925b83611db7611db1611dac846102bc565b610168565b91610168565b1015611e7e57600094611dca6000610f3e565b5b80611de6611de0611ddb876102bc565b610168565b91610168565b1015611e7157611dff611dfa848890611c52565b6115cb565b611e23611e1d611e18611e13888690611c52565b6115cb565b61019a565b9161019a565b14611e3657611e3190611c43565b611dcb565b5093909450611e4760015b15610212565b611e5c575b611e5590611c43565b9293611d9c565b91611e69611e5591611c72565b929050611e4c565b50939094611e4790611e41565b91611e8a919350611cc8565b90611e956000610f3e565b90611ea06000610f3e565b935b84611ebd611eb7611eb2856102bc565b610168565b91610168565b1015611fac57600095611ed06000610f3e565b5b80611eec611ee6611ee1866102bc565b610168565b91610168565b1015611f9f57611f05611f00858990611c52565b6115cb565b611f29611f23611f1e611f19878690611c52565b6115cb565b61019a565b9161019a565b14611f3c57611f3790611c43565b611ed1565b5094909550611f4d60015b15610212565b611f62575b611f5b90611c43565b9394611ea2565b91611f97611f5b91611f92611f80611f7b868890611c52565b6115cb565b611f8d8891849092611c52565b6115a2565b611c72565b929050611f52565b50949095611f4d90611f47565b505050905090565b90611fc691611fc16126bd565b611fc8565b565b90611fd291612a48565b565b90611fde91611fb4565b565b90611ff69594939291611ff16126bd565b612374565b565b60007f47616d6520616c72656164792065786973747300000000000000000000000000910152565b61202d6013602092610f5a565b61203681611ff8565b0190565b6120509060208101906000818303910152612020565b90565b1561205a57565b612062610153565b62461bcd60e51b8152806120786004820161203a565b0390fd5b5090565b5090565b60007f417272617973206c656e677468206d69736d6174636800000000000000000000910152565b6120b96016602092610f5a565b6120c281612084565b0190565b6120dc90602081019060008183039101526120ac565b90565b156120e657565b6120ee610153565b62461bcd60e51b815280612104600482016120c6565b0390fd5b60007f53746172742074696d65206d75737420626520696e2074686520667574757265910152565b61213c60208092610f5a565b61214581612108565b0190565b61215f9060208101906000818303910152612130565b90565b1561216957565b612171610153565b62461bcd60e51b81528061218760048201612149565b0390fd5b61219560c0611572565b90565b9061222960a0600561222f946121bd600082016121b7600088016115be565b90611154565b6121d6600182016121d060208801611616565b9061111a565b6121ef600282016121e9604088016115be565b90611154565b61220860038201612202606088016115be565b90611154565b6122216004820161221b608088016115be565b90611154565b0192016115be565b90611154565b565b9061223b91612198565b565b919081101561224d576020020190565b61171d565b3561225c816101a6565b90565b60007f496e76616c696420746f6b656e20616464726573730000000000000000000000910152565b6122946015602092610f5a565b61229d8161225f565b0190565b6122b79060208101906000818303910152612287565b90565b156122c157565b6122c9610153565b62461bcd60e51b8152806122df600482016122a1565b0390fd5b91908110156122f3576020020190565b61171d565b356123028161016b565b90565b60209181520190565b600080fd5b9037565b90918261232391612305565b9160018060fb1b03811161234657829160206123429202938491612313565b0190565b61230e565b93929061236a60209161237294604088019188830360008a0152612317565b9401906101f8565b565b959391929093600187612386916103b1565b600001612392906103e6565b600061239d90610f3e565b906123a790610168565b146123b190612053565b84846123bc9161207c565b82846123c791612080565b6123d090610168565b906123da90610168565b146123e4906120df565b85426123ef90610168565b906123f990610168565b1161240390612162565b866000808860009160009361241661218b565b95600087019061242591611594565b6020860190612433916115b0565b61243c90610f3e565b604085019061244a91611594565b606084019061245891611594565b61246190610f3e565b608083019061246f91611594565b61247890610f3e565b60a082019061248691611594565b600188612492916103b1565b9061249c91612231565b60006124a790610f3e565b5b806124c56124bf6124ba89899061207c565b610168565b91610168565b101561255757612552906125086124e66124e18688859161223d565b612252565b6125016124fb6124f66000610ee7565b61019a565b9161019a565b14156122ba565b61254d61251f61251a8688859161223d565b612252565b61254861252e60028d906106a3565b61254261253d8c8c88916122e3565b6122f8565b906106bb565b6115f6565b611c43565b6124a8565b5095915050929092919290926125a26125907f3006f3b6fa08fae6753f5f2f5d2ecd6db5d48638638bd0e0a404522c7cfdd86294610395565b94612599610153565b9384938461234b565b0390a2565b906125b59594939291611fe0565b565b6125c2903390612a48565b565b6125d5906125d06126bd565b6125d7565b565b806125f36125ed6125e86000610ee7565b61019a565b9161019a565b14612603576126019061270c565b565b6126286126106000610ee7565b6000918291631e4fbdf760e01b835260048301610726565b0390fd5b612635906125c4565b565b6126b56126ba91612646610d0b565b506126af60026126a861266361265e600186906103b1565b610f3b565b9361268d612673600087016103e6565b6126866126806000610f3e565b91610168565b1415610fbe565b6126a161269c6001870161040d565b611c1a565b6006610e76565b92016103e6565b90610d10565b610e23565b90565b6126c5610f11565b6126de6126d86126d3612d11565b61019a565b9161019a565b036126e557565b6127086126f0612d11565b600091829163118cdaa760e01b835260048301610726565b0390fd5b6127166000610a84565b6127218260006115f6565b9061275561274f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361054d565b9161054d565b9161275e610153565b8061276881610782565b0390a3565b60007f4e6f20766f746520706c61636564000000000000000000000000000000000000910152565b6127a2600e602092610f5a565b6127ab8161276d565b0190565b6127c59060208101906000818303910152612795565b90565b156127cf57565b6127d7610153565b62461bcd60e51b8152806127ed600482016127af565b0390fd5b60007f52657761726420616c726561647920636c61696d656400000000000000000000910152565b6128266016602092610f5a565b61282f816127f1565b0190565b6128499060208101906000818303910152612819565b90565b1561285357565b61285b610153565b62461bcd60e51b81528061287160048201612833565b0390fd5b67ffffffffffffffff811161288d5760208091020190565b610dc2565b906128a461289f83612875565b611572565b918252565b369037565b906128d36128bb83612892565b926020806128c98693612875565b92019103906128a9565b565b5190565b60200190565b6128e890610168565b9052565b906128f9816020936128df565b0190565b60200190565b9061292061291a612913846128d5565b8093612305565b926128d9565b9060005b8181106129315750505090565b90919261294a61294460019286516128ec565b946128fd565b9101919091612924565b909161296f61297d93604084019084820360008601526102f3565b916020818403910152612903565b90565b9061298a826128d5565b81101561299b576020809102010190565b61171d565b9160206129c29294936129bb60408201966000830190610205565b01906101f8565b565b60007f526577617264207472616e73666572206661696c656400000000000000000000910152565b6129f96016602092610f5a565b612a02816129c4565b0190565b612a1c90602081019060008183039101526129ec565b90565b15612a2657565b612a2e610153565b62461bcd60e51b815280612a4460048201612a06565b0390fd5b9091612a5e612a59600184906103b1565b610f3b565b612b07612b01612afc6002612af56001612a8c612a87612a8060048c90610a40565b8c90610a58565b610c91565b612a9f612a9a838a0161040d565b611c1a565b612ac7612aae600083016103e6565b612ac1612abb6000610f3e565b91610168565b116127c8565b612ae3612ade612ad8868401610aab565b15610212565b61284c565b612aef82858301611642565b016103e6565b94016103e6565b610168565b91610168565b14600014612c9b57612b1a828490612ded565b91612b256000610f3e565b5b80612b41612b3b612b36866102bc565b610168565b91610168565b1015612c4557612b5a612b55858390612980565b6115be565b612b6d612b676000610f3e565b91610168565b11612b81575b612b7c90611c43565b612b26565b612ba4612b9f612b9a612b95868590611c52565b6115cb565b61143d565b611449565b90602063a9059cbb928890612bdf6000612bc7612bc28b8890612980565b6115be565b96612bea612bd3610153565b98899687958694611461565b8452600484016129a0565b03925af1918215612c4057612b7c92612c0b91600091612c12575b50612a1f565b9050612b73565b612c33915060203d8111612c39575b612c2b8183610dd8565b81019061148b565b38612c05565b503d612c21565b6114dd565b5093909192909192612c80612c7a7ff9ed98ed50f69982c9a5426866101b5959982ece211bd98c0229678f92a5ab3493610395565b9361054d565b93612c95612c8c610153565b92839283612954565b0390a35b565b91612cae612ca96000610f3e565b611cc8565b91612cc1612cbc6000610f3e565b6128ae565b612cf4612cee7ff9ed98ed50f69982c9a5426866101b5959982ece211bd98c0229678f92a5ab3493610395565b9361054d565b93612d09612d00610153565b92839283612954565b0390a3612c99565b612d19610c87565b503390565b606090565b90565b612d3a612d35612d3f92612d23565b610392565b610168565b90565b90565b612d59612d54612d5e92612d42565b610392565b610168565b90565b612d70612d7691939293610168565b92610168565b91612d82838202610168565b928184041490151715612d9157565b6116d4565b90565b612dad612da8612db292612d96565b610392565b610168565b90565b634e487b7160e01b600052601260045260246000fd5b612dd7612ddd91610168565b91610168565b908115612de8570490565b612db5565b9091612df7610d0b565b50612e00612d1e565b50612e32612e2d612e1b612e16600186906103b1565b610f3b565b94612e2860048690610a40565b610a58565b610c91565b90612e47612e426001860161040d565b611c1a565b612e6f612e56600084016103e6565b612e69612e636000610f3e565b91610168565b116127c8565b612e7b600183016103e6565b612e98612e92612e8d600288016103e6565b610168565b91610168565b0361312157612eb383612ead600287016103e6565b90613176565b94909493612ed3612ece86612ec86001612d26565b906116ea565b611cc8565b91612ef0612eeb87612ee56001612d26565b906116ea565b6128ae565b96612f19612f0060028801610a84565b612f1486612f0e6000610f3e565b90611c52565b6115a2565b612f41612f28600088016103e6565b612f3c8a612f366000610f3e565b90612980565b611594565b612f6a612f65612f5360068690610e76565b612f5f600286016103e6565b90610d10565b610d28565b94612f756000610f3e565b5b80612f89612f838b610168565b91610168565b1015613114576130749061306f61304a612fac612fa7878590611c52565b6115cb565b612fc389612fbc60028b016103e6565b8391613329565b90612fce6000610f3e565b908c612fe3612fdd6000610f3e565b91610168565b116130db575b8d612ff46000610f3e565b9361300160058d016103e6565b61301461300e6000610f3e565b91610168565b11613079575b5050613045906130408d91613039896130336001612d26565b906116ea565b9092611c52565b6115a2565b6116ea565b61306a8d916130638561305d6001612d26565b906116ea565b9092612980565b611594565b611c43565b612f76565b6130459294506130d1916130b960006130b26130a26130bf9561309c6032612d45565b90612d61565b6130ac6064612d99565b90612dcb565b92016103e6565b90612d61565b6130cb60058d016103e6565b90612dcb565b9290508d3861301a565b905061310e6131076130f7846130f16032612d45565b90612d61565b6131016064612d99565b90612dcb565b8d90612dcb565b90612fe9565b5096505050509150509190565b925050506131376131326000610f3e565b611cc8565b9061314a6131456000610f3e565b6128ae565b90565b61315681610d28565b82101561317157613168600191610d35565b91020190600090565b61171d565b9190613180610d0b565b50613189610c82565b506131a66131a161319c60078690610d10565b610d28565b611cc8565b906131b16000610f3e565b936131bc6000610f3e565b5b806131e36131dd6131d86131d360078790610d10565b610d28565b610168565b91610168565b10156133225761322461321f61320e61320861320160078790610d10565b859061314d565b906106f6565b61321a60048690610a40565b610a58565b610c91565b613230600182016103e6565b61324261323c86610168565b91610168565b03613257575b5061325290611c43565b6131bd565b600261326a919794979693929601610a84565b916000966132786000610f3e565b5b8061328c61328688610168565b91610168565b1015613311576132a56132a0888390611c52565b6115cb565b6132b76132b18761019a565b9161019a565b146132ca576132c590611c43565b613279565b509396509490916132dd60015b15610212565b6132e7575b613248565b613252919661330561330a926133008891849092611c52565b6115a2565b611c72565b95906132e2565b5093966132dd9096929391966132d7565b5050509190565b9291613333610c82565b5061333e6000610f3e565b906133496000610f3e565b5b8061337061336a61336561336060078b90610d10565b610d28565b610168565b91610168565b1015613431576133b16133ac61339b61339561338e60078b90610d10565b859061314d565b906106f6565b6133a760048a90610a40565b610a58565b610c91565b6133bd600182016103e6565b6133cf6133c987610168565b91610168565b14158061340c575b6133eb575b506133e690611c43565b61334a565b6133e691936133ff600061340593016103e6565b906116ea565b92906133dc565b5061341960028201610a84565b61342b6134258561019a565b9161019a565b146133d7565b5050919250509056fea2646970667358221220529fa6f4dca311cbfb46c33b2dc1995bc8752464069a0748e03ccfc6c4a531ee64736f6c634300081c0033\r\n";

    private static String librariesLinkedBinary;

    public static final String FUNC_CLAIMMVPREWARD = "claimMVPReward";

    public static final String FUNC_CLAIMMVPREWARDFORUSER = "claimMVPRewardForUser";

    public static final String FUNC_CREATEMVPGAME = "createMVPGame";

    public static final String FUNC_FINALIZEMVP = "finalizeMVP";

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_GETALLGAMEVOTERS = "getAllGameVoters";

    public static final String FUNC_GETLOSINGVOTERS = "getLosingVoters";

    public static final String FUNC_GETPLAYERVOTERS = "getPlayerVoters";

    public static final String FUNC_GETTOTALVOTES = "getTotalVotes";

    public static final String FUNC_GETUSERVOTE = "getUserVote";

    public static final String FUNC_GETWINNINGVOTERS = "getWinningVoters";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PLAYERTOTOKEN = "playerToToken";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TOTALVOTESPERPLAYER = "totalVotesPerPlayer";

    public static final String FUNC_TOTALVOTESPERTOKEN = "totalVotesPerToken";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_VOTEMVP = "voteMVP";

    public static final String FUNC_VOTES = "votes";

    public static final Event MVPGAMECREATED_EVENT = new Event("MVPGameCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MVPGAMEFINALIZED_EVENT = new Event("MVPGameFinalized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MVPREWARDCLAIMED_EVENT = new Event("MVPRewardClaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event MVPVOTED_EVENT = new Event("MVPVoted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected MVPVoting(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MVPVoting(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MVPVoting(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MVPVoting(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> claimMVPReward(BigInteger gameId) {
        final Function function = new Function(
                FUNC_CLAIMMVPREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimMVPRewardForUser(BigInteger gameId,
            String user) {
        final Function function = new Function(
                FUNC_CLAIMMVPREWARDFORUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createMVPGame(BigInteger gameId,
            List<BigInteger> playerIds, List<String> tokenAddresses, BigInteger startTime) {
        final Function function = new Function(
                FUNC_CREATEMVPGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(playerIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(tokenAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(startTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeMVP(BigInteger gameId,
            BigInteger winningPlayerId) {
        final Function function = new Function(
                FUNC_FINALIZEMVP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(winningPlayerId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple6<BigInteger, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>> games(
            BigInteger param0) {
        final Function function = new Function(FUNC_GAMES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<BigInteger, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<BigInteger, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, Boolean, BigInteger, BigInteger, BigInteger, BigInteger> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, Boolean, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getAllGameVoters(BigInteger gameId) {
        final Function function = new Function(FUNC_GETALLGAMEVOTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getLosingVoters(BigInteger gameId) {
        final Function function = new Function(FUNC_GETLOSINGVOTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getPlayerVoters(BigInteger gameId, BigInteger playerId) {
        final Function function = new Function(FUNC_GETPLAYERVOTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(playerId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTotalVotes(BigInteger gameId, BigInteger playerId) {
        final Function function = new Function(FUNC_GETTOTALVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(playerId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, String, Boolean>> getUserVote(
            BigInteger gameId, String user) {
        final Function function = new Function(FUNC_GETUSERVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getWinningVoters(BigInteger gameId) {
        final Function function = new Function(FUNC_GETWINNINGVOTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> playerToToken(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_PLAYERTOTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalVotesPerPlayer(BigInteger param0,
            BigInteger param1) {
        final Function function = new Function(FUNC_TOTALVOTESPERPLAYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalVotesPerToken(BigInteger param0, String param1) {
        final Function function = new Function(FUNC_TOTALVOTESPERTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> voteMVP(BigInteger gameId, BigInteger playerId,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_VOTEMVP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(playerId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, String, Boolean>> votes(
            BigInteger param0, String param1) {
        final Function function = new Function(FUNC_VOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public static List<MVPGameCreatedEventResponse> getMVPGameCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MVPGAMECREATED_EVENT, transactionReceipt);
        ArrayList<MVPGameCreatedEventResponse> responses = new ArrayList<MVPGameCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MVPGameCreatedEventResponse typedResponse = new MVPGameCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.playerIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MVPGameCreatedEventResponse getMVPGameCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MVPGAMECREATED_EVENT, log);
        MVPGameCreatedEventResponse typedResponse = new MVPGameCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.playerIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<MVPGameCreatedEventResponse> mVPGameCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMVPGameCreatedEventFromLog(log));
    }

    public Flowable<MVPGameCreatedEventResponse> mVPGameCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MVPGAMECREATED_EVENT));
        return mVPGameCreatedEventFlowable(filter);
    }

    public static List<MVPGameFinalizedEventResponse> getMVPGameFinalizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MVPGAMEFINALIZED_EVENT, transactionReceipt);
        ArrayList<MVPGameFinalizedEventResponse> responses = new ArrayList<MVPGameFinalizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MVPGameFinalizedEventResponse typedResponse = new MVPGameFinalizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.winningPlayerId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MVPGameFinalizedEventResponse getMVPGameFinalizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MVPGAMEFINALIZED_EVENT, log);
        MVPGameFinalizedEventResponse typedResponse = new MVPGameFinalizedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.winningPlayerId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MVPGameFinalizedEventResponse> mVPGameFinalizedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMVPGameFinalizedEventFromLog(log));
    }

    public Flowable<MVPGameFinalizedEventResponse> mVPGameFinalizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MVPGAMEFINALIZED_EVENT));
        return mVPGameFinalizedEventFlowable(filter);
    }

    public static List<MVPRewardClaimedEventResponse> getMVPRewardClaimedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MVPREWARDCLAIMED_EVENT, transactionReceipt);
        ArrayList<MVPRewardClaimedEventResponse> responses = new ArrayList<MVPRewardClaimedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MVPRewardClaimedEventResponse typedResponse = new MVPRewardClaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenAddresses = (List<String>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.amounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MVPRewardClaimedEventResponse getMVPRewardClaimedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MVPREWARDCLAIMED_EVENT, log);
        MVPRewardClaimedEventResponse typedResponse = new MVPRewardClaimedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenAddresses = (List<String>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.amounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<MVPRewardClaimedEventResponse> mVPRewardClaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMVPRewardClaimedEventFromLog(log));
    }

    public Flowable<MVPRewardClaimedEventResponse> mVPRewardClaimedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MVPREWARDCLAIMED_EVENT));
        return mVPRewardClaimedEventFlowable(filter);
    }

    public static List<MVPVotedEventResponse> getMVPVotedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MVPVOTED_EVENT, transactionReceipt);
        ArrayList<MVPVotedEventResponse> responses = new ArrayList<MVPVotedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MVPVotedEventResponse typedResponse = new MVPVotedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.playerId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MVPVotedEventResponse getMVPVotedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MVPVOTED_EVENT, log);
        MVPVotedEventResponse typedResponse = new MVPVotedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.playerId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<MVPVotedEventResponse> mVPVotedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMVPVotedEventFromLog(log));
    }

    public Flowable<MVPVotedEventResponse> mVPVotedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MVPVOTED_EVENT));
        return mVPVotedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static MVPVoting load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new MVPVoting(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MVPVoting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MVPVoting(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MVPVoting load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new MVPVoting(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MVPVoting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MVPVoting(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MVPVoting> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MVPVoting.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<MVPVoting> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MVPVoting.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<MVPVoting> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MVPVoting.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<MVPVoting> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MVPVoting.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }


    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class MVPGameCreatedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public List<BigInteger> playerIds;

        public BigInteger startTime;
    }

    public static class MVPGameFinalizedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public BigInteger winningPlayerId;
    }

    public static class MVPRewardClaimedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String user;

        public List<String> tokenAddresses;

        public List<BigInteger> amounts;
    }

    public static class MVPVotedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String user;

        public BigInteger playerId;

        public BigInteger amount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
//java 수정