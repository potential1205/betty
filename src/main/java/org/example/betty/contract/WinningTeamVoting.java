package org.example.betty.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class WinningTeamVoting extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b919061019e565b60405180910390fd5b6100938161009960201b60201c565b506101b9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101888261015d565b9050919050565b6101988161017d565b82525050565b60006020820190506101b3600083018461018f565b92915050565b6138b4806101c86000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063ae169a50116100ad578063e2ebeb9b11610071578063e2ebeb9b14610349578063e71c969714610379578063e8a7a25b14610395578063f2fde38b146103b1578063f644b3bb146103cd57610121565b8063ae169a501461027f578063b6013cef1461029b578063bb2b9dc5146102b7578063c03fb87c146102e7578063c13ecbb81461031957610121565b80636ee34663116100f45780636ee34663146101db578063715018a6146101f75780638b3195a9146102015780638b8ab821146102315780638da5cb5b1461026157610121565b8063117a5b901461012657806331da08e61461015f578063324d32441461017b5780635aaab47e146101ab575b600080fd5b610140600480360381019061013b91906128c6565b6103ff565b6040516101569a9998979695949392919061295e565b60405180910390f35b61017960048036038101906101749190612a26565b6104a0565b005b610195600480360381019061019091906128c6565b6108f7565b6040516101a29190612b24565b60405180910390f35b6101c560048036038101906101c09190612b46565b6109f7565b6040516101d29190612b86565b60405180910390f35b6101f560048036038101906101f09190612ba1565b610a26565b005b6101ff610c1c565b005b61021b600480360381019061021691906128c6565b610c30565b6040516102289190612b24565b60405180910390f35b61024b60048036038101906102469190612b46565b610d96565b6040516102589190612b86565b60405180910390f35b610269610dbb565b6040516102769190612bf4565b60405180910390f35b610299600480360381019061029491906128c6565b610de4565b005b6102b560048036038101906102b09190612b46565b611232565b005b6102d160048036038101906102cc9190612b46565b6113a1565b6040516102de9190612b86565b60405180910390f35b61030160048036038101906102fc9190612a26565b611471565b60405161031093929190612c0f565b60405180910390f35b610333600480360381019061032e9190612b46565b61158c565b6040516103409190612b24565b60405180910390f35b610363600480360381019061035e91906128c6565b6116f2565b6040516103709190612b24565b60405180910390f35b610393600480360381019061038e9190612c46565b611878565b005b6103af60048036038101906103aa9190612c99565b611fc2565b005b6103cb60048036038101906103c69190612d26565b612351565b005b6103e760048036038101906103e29190612a26565b6123d7565b6040516103f693929190612c0f565b60405180910390f35b60016020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16908060070154908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508a565b6104a861241b565b600060016000848152602001908152602001600020905060006002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508160060160009054906101000a900460ff16610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90612db0565b60405180910390fd5b60008160000154116105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a290612e1c565b60405180910390fd5b8060020160009054906101000a900460ff16156105fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f490612e88565b60405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555081600701548160010154036108a057600061063585856124a2565b905060006106478684600101546126f6565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8685600001546040518363ffffffff1660e01b8152600401610688929190612ea8565b6020604051808303816000875af11580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb9190612efd565b61070a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070190612f76565b60405180910390fd5b60008460010154846001015414610745578460080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661076b565b8460090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050600084600001548461077f9190612fc5565b90506000811115610848578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88836040518363ffffffff1660e01b81526004016107c5929190612ea8565b6020604051808303816000875af11580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190612efd565b610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e90613045565b60405180910390fd5b5b8673ffffffffffffffffffffffffffffffffffffffff16887f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb78660405161088f9190612b86565b60405180910390a3505050506108f1565b8273ffffffffffffffffffffffffffffffffffffffff16847f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb760006040516108e891906130aa565b60405180910390a35b50505050565b606060006001600084815260200190815260200160002090506000816000015403610957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094e90613111565b60405180910390fd5b600460008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109ea57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109a0575b5050505050915050919050565b600060036000848152602001908152602001600020600083815260200190815260200160002054905092915050565b610a2e61241b565b60006001600085815260200190815260200160002090506000816000015403610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8390613111565b60405180910390fd5b8060060160009054906101000a900460ff1615610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad59061317d565b60405180910390fd5b60008160040154148015610af6575060008160050154145b610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c906131e9565b60405180910390fd5b828160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f94fccb7efe5ad46d10196a1839ad9a1a0ab045594ea002398eeeb645f607393960405160405180910390a450505050565b610c2461241b565b610c2e60006127bf565b565b606060006001600084815260200190815260200160002090506000816000015403610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8790613111565b60405180910390fd5b8060060160009054906101000a900460ff16610ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd890612db0565b60405180910390fd5b60056000848152602001908152602001600020600082600701548152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610d8957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d3f575b5050505050915050919050565b6003602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060016000838152602001908152602001600020905060006002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508160060160009054906101000a900460ff16610ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9790612db0565b60405180910390fd5b6000816000015411610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90612e1c565b60405180910390fd5b8060020160009054906101000a900460ff1615610f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3090612e88565b60405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555081600701548160010154036111dc576000610f7184336124a2565b90506000610f838584600101546126f6565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3385600001546040518363ffffffff1660e01b8152600401610fc4929190612ea8565b6020604051808303816000875af1158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110079190612efd565b611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d90612f76565b60405180910390fd5b60008460010154846001015414611081578460080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166110a7565b8460090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905060008460000154846110bb9190612fc5565b90506000811115611184578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611101929190612ea8565b6020604051808303816000875af1158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190612efd565b611183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117a90613045565b60405180910390fd5b5b3373ffffffffffffffffffffffffffffffffffffffff16877f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7866040516111cb9190612b86565b60405180910390a35050505061122d565b3373ffffffffffffffffffffffffffffffffffffffff16837f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7600060405161122491906130aa565b60405180910390a35b505050565b61123a61241b565b60006001600084815260200190815260200160002090506000816000015403611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128f90613111565b60405180910390fd5b8060060160009054906101000a900460ff16156112ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e19061317d565b60405180910390fd5b80600101548214806112ff5750806002015482145b61133e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133590613255565b60405180910390fd5b60018160060160006101000a81548160ff021916908315150217905550818160070181905550827f8a5377eea8cb863d6ed1fe569a6e8072b9f18231b6a1902e256a1cb5fe87e6f1836040516113949190612b86565b60405180910390a2505050565b6000806001600085815260200190815260200160002090506000816000015403611400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f790613111565b60405180910390fd5b8060010154830361141857806004015491505061146b565b8060020154830361143057806005015491505061146b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611462906132c1565b60405180910390fd5b92915050565b60008060006002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546002600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546002600088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff169250925092509250925092565b6060600060016000858152602001908152602001600020905060008160000154036115ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e390613111565b60405180910390fd5b80600101548314806116015750806002015483145b611640576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611637906132c1565b60405180910390fd5b6005600085815260200190815260200160002060008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156116e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161169a575b505050505091505092915050565b606060006001600084815260200190815260200160002090506000816000015403611752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174990613111565b60405180910390fd5b8060060160009054906101000a900460ff166117a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179a90612db0565b60405180910390fd5b600081600101548260070154146117be5781600101546117c4565b81600201545b905060056000858152602001908152602001600020600082815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561186a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611820575b505050505092505050919050565b600060016000858152602001908152602001600020905060008160000154036118d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cd90613111565b60405180910390fd5b8060030154421061191c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119139061332d565b60405180910390fd5b8060060160009054906101000a900460ff161561196e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119659061317d565b60405180910390fd5b80600101548314806119835750806002015483145b6119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b9906132c1565b60405180910390fd5b60006002600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414611a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4f90613399565b60405180910390fd5b60008211611a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9290613405565b60405180910390fd5b600081600101548403611bb6578160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082826004016000828254611ae39190613425565b92505081905550600360008681526020019081526020016000206000836001015481526020019081526020016000206000815480929190611b2390613459565b919050555060056000868152602001908152602001600020600083600101548152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611cc0565b8160090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082826005016000828254611bf19190613425565b92505081905550600360008681526020019081526020016000206000836002015481526020019081526020016000206000815480929190611c3190613459565b919050555060056000868152602001908152602001600020600083600201548152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6006600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611e005760046000868152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016006600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b60008190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401611e42939291906134a1565b6020604051808303816000875af1158015611e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e859190612efd565b611ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebb90612f76565b60405180910390fd5b6040518060600160405280858152602001868152602001600015158152506002600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16867f1b8a9031cb9351278d70a994f81536e9e08c91162e64f92b2fe4766fb7a891b48787604051611fb29291906134d8565b60405180910390a3505050505050565b611fca61241b565b6000600160008881526020019081526020016000206000015414612023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201a9061354d565b60405180910390fd5b838503612065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205c906135b9565b60405180910390fd5b4283116120a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209e90613625565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210d90613691565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217c906136fd565b60405180910390fd5b6040518061014001604052808781526020018681526020018581526020018481526020016000815260200160008152602001600015158152602001600081526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681525060016000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e082015181600701556101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101208201518160090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050857f6db547cf519631ba05cab5a13d9722f560572f134012d0acc87728bfaaa3e8f7868686868660405161234195949392919061371d565b60405180910390a2505050505050565b61235961241b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123cb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016123c29190612bf4565b60405180910390fd5b6123d4816127bf565b50565b6002602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020160009054906101000a900460ff16905083565b612423612883565b73ffffffffffffffffffffffffffffffffffffffff16612441610dbb565b73ffffffffffffffffffffffffffffffffffffffff16146124a057612464612883565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016124979190612bf4565b60405180910390fd5b565b60008060016000858152602001908152602001600020905060006002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508160060160009054906101000a900460ff1661255f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255690612db0565b60405180910390fd5b81600701548160010154146125a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a0906137bc565b60405180910390fd5b600080600084600101548560070154036125fb57846004015492508460050154915060036000898152602001908152602001600020600086600101548152602001908152602001600020549050612635565b8460050154925084600401549150600360008981526020019081526020016000206000866002015481526020019081526020016000205490505b60008314806126445750600081145b1561265a578360000154955050505050506126f0565b60008082111561268b5781606460328561267491906137dc565b61267e919061384d565b612688919061384d565b90505b6000808511156126cb5784866000015460646032876126aa91906137dc565b6126b4919061384d565b6126be91906137dc565b6126c8919061384d565b90505b808287600001546126dc9190613425565b6126e69190613425565b9750505050505050505b92915050565b60008060016000858152602001908152602001600020905080600101548303612746578060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150506127b9565b8060020154830361277e578060090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150506127b9565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b0906132c1565b60405180910390fd5b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6128a381612890565b81146128ae57600080fd5b50565b6000813590506128c08161289a565b92915050565b6000602082840312156128dc576128db61288b565b5b60006128ea848285016128b1565b91505092915050565b6128fc81612890565b82525050565b60008115159050919050565b61291781612902565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129488261291d565b9050919050565b6129588161293d565b82525050565b600061014082019050612974600083018d6128f3565b612981602083018c6128f3565b61298e604083018b6128f3565b61299b606083018a6128f3565b6129a860808301896128f3565b6129b560a08301886128f3565b6129c260c083018761290e565b6129cf60e08301866128f3565b6129dd61010083018561294f565b6129eb61012083018461294f565b9b9a5050505050505050505050565b612a038161293d565b8114612a0e57600080fd5b50565b600081359050612a20816129fa565b92915050565b60008060408385031215612a3d57612a3c61288b565b5b6000612a4b858286016128b1565b9250506020612a5c85828601612a11565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a9b8161293d565b82525050565b6000612aad8383612a92565b60208301905092915050565b6000602082019050919050565b6000612ad182612a66565b612adb8185612a71565b9350612ae683612a82565b8060005b83811015612b17578151612afe8882612aa1565b9750612b0983612ab9565b925050600181019050612aea565b5085935050505092915050565b60006020820190508181036000830152612b3e8184612ac6565b905092915050565b60008060408385031215612b5d57612b5c61288b565b5b6000612b6b858286016128b1565b9250506020612b7c858286016128b1565b9150509250929050565b6000602082019050612b9b60008301846128f3565b92915050565b600080600060608486031215612bba57612bb961288b565b5b6000612bc8868287016128b1565b9350506020612bd986828701612a11565b9250506040612bea86828701612a11565b9150509250925092565b6000602082019050612c09600083018461294f565b92915050565b6000606082019050612c2460008301866128f3565b612c3160208301856128f3565b612c3e604083018461290e565b949350505050565b600080600060608486031215612c5f57612c5e61288b565b5b6000612c6d868287016128b1565b9350506020612c7e868287016128b1565b9250506040612c8f868287016128b1565b9150509250925092565b60008060008060008060c08789031215612cb657612cb561288b565b5b6000612cc489828a016128b1565b9650506020612cd589828a016128b1565b9550506040612ce689828a016128b1565b9450506060612cf789828a016128b1565b9350506080612d0889828a01612a11565b92505060a0612d1989828a01612a11565b9150509295509295509295565b600060208284031215612d3c57612d3b61288b565b5b6000612d4a84828501612a11565b91505092915050565b600082825260208201905092915050565b7f47616d65206e6f742066696e616c697a65640000000000000000000000000000600082015250565b6000612d9a601283612d53565b9150612da582612d64565b602082019050919050565b60006020820190508181036000830152612dc981612d8d565b9050919050565b7f4e6f2062657420706c6163656400000000000000000000000000000000000000600082015250565b6000612e06600d83612d53565b9150612e1182612dd0565b602082019050919050565b60006020820190508181036000830152612e3581612df9565b9050919050565b7f52657761726420616c726561647920636c61696d656400000000000000000000600082015250565b6000612e72601683612d53565b9150612e7d82612e3c565b602082019050919050565b60006020820190508181036000830152612ea181612e65565b9050919050565b6000604082019050612ebd600083018561294f565b612eca60208301846128f3565b9392505050565b612eda81612902565b8114612ee557600080fd5b50565b600081519050612ef781612ed1565b92915050565b600060208284031215612f1357612f1261288b565b5b6000612f2184828501612ee8565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612f60600f83612d53565b9150612f6b82612f2a565b602082019050919050565b60006020820190508181036000830152612f8f81612f53565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fd082612890565b9150612fdb83612890565b9250828203905081811115612ff357612ff2612f96565b5b92915050565b7f426f6e7573207472616e73666572206661696c65640000000000000000000000600082015250565b600061302f601583612d53565b915061303a82612ff9565b602082019050919050565b6000602082019050818103600083015261305e81613022565b9050919050565b6000819050919050565b6000819050919050565b600061309461308f61308a84613065565b61306f565b612890565b9050919050565b6130a481613079565b82525050565b60006020820190506130bf600083018461309b565b92915050565b7f47616d6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006130fb601383612d53565b9150613106826130c5565b602082019050919050565b6000602082019050818103600083015261312a816130ee565b9050919050565b7f47616d6520616c72656164792066696e616c697a656400000000000000000000600082015250565b6000613167601683612d53565b915061317282613131565b602082019050919050565b600060208201905081810360008301526131968161315a565b9050919050565b7f4265747320616c726561647920706c6163656400000000000000000000000000600082015250565b60006131d3601383612d53565b91506131de8261319d565b602082019050919050565b60006020820190508181036000830152613202816131c6565b9050919050565b7f496e76616c69642077696e6e696e67207465616d000000000000000000000000600082015250565b600061323f601483612d53565b915061324a82613209565b602082019050919050565b6000602082019050818103600083015261326e81613232565b9050919050565b7f496e76616c6964207465616d0000000000000000000000000000000000000000600082015250565b60006132ab600c83612d53565b91506132b682613275565b602082019050919050565b600060208201905081810360008301526132da8161329e565b9050919050565b7f42657474696e6720636c6f736564000000000000000000000000000000000000600082015250565b6000613317600e83612d53565b9150613322826132e1565b602082019050919050565b600060208201905081810360008301526133468161330a565b9050919050565b7f416c726561647920626574000000000000000000000000000000000000000000600082015250565b6000613383600b83612d53565b915061338e8261334d565b602082019050919050565b600060208201905081810360008301526133b281613376565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006133ef601d83612d53565b91506133fa826133b9565b602082019050919050565b6000602082019050818103600083015261341e816133e2565b9050919050565b600061343082612890565b915061343b83612890565b925082820190508082111561345357613452612f96565b5b92915050565b600061346482612890565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361349657613495612f96565b5b600182019050919050565b60006060820190506134b6600083018661294f565b6134c3602083018561294f565b6134d060408301846128f3565b949350505050565b60006040820190506134ed60008301856128f3565b6134fa60208301846128f3565b9392505050565b7f47616d6520616c72656164792065786973747300000000000000000000000000600082015250565b6000613537601383612d53565b915061354282613501565b602082019050919050565b600060208201905081810360008301526135668161352a565b9050919050565b7f5465616d73206d75737420626520646966666572656e74000000000000000000600082015250565b60006135a3601783612d53565b91506135ae8261356d565b602082019050919050565b600060208201905081810360008301526135d281613596565b9050919050565b7f53746172742074696d65206d75737420626520696e2074686520667574757265600082015250565b600061360f602083612d53565b915061361a826135d9565b602082019050919050565b6000602082019050818103600083015261363e81613602565b9050919050565b7f496e76616c6964207465616d204120746f6b656e206164647265737300000000600082015250565b600061367b601c83612d53565b915061368682613645565b602082019050919050565b600060208201905081810360008301526136aa8161366e565b9050919050565b7f496e76616c6964207465616d204220746f6b656e206164647265737300000000600082015250565b60006136e7601c83612d53565b91506136f2826136b1565b602082019050919050565b60006020820190508181036000830152613716816136da565b9050919050565b600060a08201905061373260008301886128f3565b61373f60208301876128f3565b61374c60408301866128f3565b613759606083018561294f565b613766608083018461294f565b9695505050505050565b7f5573657220646964206e6f7420626574206f6e2077696e6e696e67207465616d600082015250565b60006137a6602083612d53565b91506137b182613770565b602082019050919050565b600060208201905081810360008301526137d581613799565b9050919050565b60006137e782612890565b91506137f283612890565b925082820261380081612890565b9150828204841483151761381757613816612f96565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061385882612890565b915061386383612890565b9250826138735761387261381e565b5b82820490509291505056fea26469706673582212203861e2b16b9ac36e5ed79d27d43ab24f1df553032f059195fe90c455a820176564736f6c634300081c0033\n";

    private static String librariesLinkedBinary;

    public static final String FUNC_BETS = "bets";

    public static final String FUNC_CLAIMFORUSER = "claimForUser";

    public static final String FUNC_CLAIMREWARD = "claimReward";

    public static final String FUNC_CREATEGAME = "createGame";

    public static final String FUNC_FINALIZE = "finalize";

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_GETALLGAMEBETTORS = "getAllGameBettors";

    public static final String FUNC_GETLOSINGTEAMBETTORS = "getLosingTeamBettors";

    public static final String FUNC_GETTEAMBETS = "getTeamBets";

    public static final String FUNC_GETTEAMBETTERSCOUNT = "getTeamBettersCount";

    public static final String FUNC_GETTEAMBETTORS = "getTeamBettors";

    public static final String FUNC_GETUSERBET = "getUserBet";

    public static final String FUNC_GETWINNINGTEAMBETTORS = "getWinningTeamBettors";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PLACEBET = "placeBet";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TEAMBETCOUNTS = "teamBetCounts";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEGAMETOKENADDRESSES = "updateGameTokenAddresses";

    public static final Event BETPLACED_EVENT = new Event("BetPlaced",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMECREATED_EVENT = new Event("GameCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event GAMEFINALIZED_EVENT = new Event("GameFinalized",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMETOKENADDRESSESUPDATED_EVENT = new Event("GameTokenAddressesUpdated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REWARDCLAIMED_EVENT = new Event("RewardClaimed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected WinningTeamVoting(String contractAddress, Web3j web3j, Credentials credentials,
                                BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WinningTeamVoting(String contractAddress, Web3j web3j, Credentials credentials,
                                ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WinningTeamVoting(String contractAddress, Web3j web3j,
                                TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WinningTeamVoting(String contractAddress, Web3j web3j,
                                TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> bets(BigInteger param0,
                                                                            String param1) {
        final Function function = new Function(FUNC_BETS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0),
                        new org.web3j.abi.datatypes.Address(160, param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> claimForUser(BigInteger gameId, String user) {
        final Function function = new Function(
                FUNC_CLAIMFORUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.Address(160, user)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimReward(BigInteger gameId) {
        final Function function = new Function(
                FUNC_CLAIMREWARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createGame(BigInteger gameId, BigInteger teamAId,
                                                             BigInteger teamBId, BigInteger startTime, String teamATokenAddress,
                                                             String teamBTokenAddress) {
        final Function function = new Function(
                FUNC_CREATEGAME,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.generated.Uint256(teamAId),
                        new org.web3j.abi.datatypes.generated.Uint256(teamBId),
                        new org.web3j.abi.datatypes.generated.Uint256(startTime),
                        new org.web3j.abi.datatypes.Address(160, teamATokenAddress),
                        new org.web3j.abi.datatypes.Address(160, teamBTokenAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalize(BigInteger gameId,
                                                           BigInteger winningTeamId) {
        final Function function = new Function(
                FUNC_FINALIZE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.generated.Uint256(winningTeamId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>> games(
            BigInteger param0) {
        final Function function = new Function(FUNC_GAMES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>>(function,
                new Callable<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>>() {
                    @Override
                    public Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (Boolean) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (String) results.get(8).getValue(),
                                (String) results.get(9).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getAllGameBettors(BigInteger gameId) {
        final Function function = new Function(FUNC_GETALLGAMEBETTORS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getLosingTeamBettors(BigInteger gameId) {
        final Function function = new Function(FUNC_GETLOSINGTEAMBETTORS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTeamBets(BigInteger gameId, BigInteger teamId) {
        final Function function = new Function(FUNC_GETTEAMBETS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.generated.Uint256(teamId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTeamBettersCount(BigInteger gameId,
                                                              BigInteger teamId) {
        final Function function = new Function(FUNC_GETTEAMBETTERSCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.generated.Uint256(teamId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getTeamBettors(BigInteger gameId, BigInteger teamId) {
        final Function function = new Function(FUNC_GETTEAMBETTORS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.generated.Uint256(teamId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> getUserBet(BigInteger gameId,
                                                                                  String user) {
        final Function function = new Function(FUNC_GETUSERBET,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.Address(160, user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getWinningTeamBettors(BigInteger gameId) {
        final Function function = new Function(FUNC_GETWINNINGTEAMBETTORS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> placeBet(BigInteger gameId, BigInteger teamId,
                                                           BigInteger amount) {
        final Function function = new Function(
                FUNC_PLACEBET,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.generated.Uint256(teamId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> teamBetCounts(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_TEAMBETCOUNTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateGameTokenAddresses(BigInteger gameId,
                                                                           String newTeamATokenAddress, String newTeamBTokenAddress) {
        final Function function = new Function(
                FUNC_UPDATEGAMETOKENADDRESSES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId),
                        new org.web3j.abi.datatypes.Address(160, newTeamATokenAddress),
                        new org.web3j.abi.datatypes.Address(160, newTeamBTokenAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<BetPlacedEventResponse> getBetPlacedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BETPLACED_EVENT, transactionReceipt);
        ArrayList<BetPlacedEventResponse> responses = new ArrayList<BetPlacedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BetPlacedEventResponse typedResponse = new BetPlacedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.teamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BetPlacedEventResponse getBetPlacedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BETPLACED_EVENT, log);
        BetPlacedEventResponse typedResponse = new BetPlacedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.teamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BetPlacedEventResponse> betPlacedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBetPlacedEventFromLog(log));
    }

    public Flowable<BetPlacedEventResponse> betPlacedEventFlowable(DefaultBlockParameter startBlock,
                                                                   DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BETPLACED_EVENT));
        return betPlacedEventFlowable(filter);
    }

    public static List<GameCreatedEventResponse> getGameCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMECREATED_EVENT, transactionReceipt);
        ArrayList<GameCreatedEventResponse> responses = new ArrayList<GameCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.teamAId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.teamBId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.teamATokenAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.teamBTokenAddress = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameCreatedEventResponse getGameCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMECREATED_EVENT, log);
        GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.teamAId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.teamBId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.teamATokenAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.teamBTokenAddress = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameCreatedEventFromLog(log));
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMECREATED_EVENT));
        return gameCreatedEventFlowable(filter);
    }

    public static List<GameFinalizedEventResponse> getGameFinalizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMEFINALIZED_EVENT, transactionReceipt);
        ArrayList<GameFinalizedEventResponse> responses = new ArrayList<GameFinalizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameFinalizedEventResponse typedResponse = new GameFinalizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.winningTeamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameFinalizedEventResponse getGameFinalizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMEFINALIZED_EVENT, log);
        GameFinalizedEventResponse typedResponse = new GameFinalizedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.winningTeamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<GameFinalizedEventResponse> gameFinalizedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameFinalizedEventFromLog(log));
    }

    public Flowable<GameFinalizedEventResponse> gameFinalizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMEFINALIZED_EVENT));
        return gameFinalizedEventFlowable(filter);
    }

    public static List<GameTokenAddressesUpdatedEventResponse> getGameTokenAddressesUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMETOKENADDRESSESUPDATED_EVENT, transactionReceipt);
        ArrayList<GameTokenAddressesUpdatedEventResponse> responses = new ArrayList<GameTokenAddressesUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameTokenAddressesUpdatedEventResponse typedResponse = new GameTokenAddressesUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newTeamATokenAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newTeamBTokenAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameTokenAddressesUpdatedEventResponse getGameTokenAddressesUpdatedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMETOKENADDRESSESUPDATED_EVENT, log);
        GameTokenAddressesUpdatedEventResponse typedResponse = new GameTokenAddressesUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newTeamATokenAddress = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newTeamBTokenAddress = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<GameTokenAddressesUpdatedEventResponse> gameTokenAddressesUpdatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameTokenAddressesUpdatedEventFromLog(log));
    }

    public Flowable<GameTokenAddressesUpdatedEventResponse> gameTokenAddressesUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMETOKENADDRESSESUPDATED_EVENT));
        return gameTokenAddressesUpdatedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RewardClaimedEventResponse> getRewardClaimedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REWARDCLAIMED_EVENT, transactionReceipt);
        ArrayList<RewardClaimedEventResponse> responses = new ArrayList<RewardClaimedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RewardClaimedEventResponse typedResponse = new RewardClaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RewardClaimedEventResponse getRewardClaimedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REWARDCLAIMED_EVENT, log);
        RewardClaimedEventResponse typedResponse = new RewardClaimedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RewardClaimedEventResponse> rewardClaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRewardClaimedEventFromLog(log));
    }

    public Flowable<RewardClaimedEventResponse> rewardClaimedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REWARDCLAIMED_EVENT));
        return rewardClaimedEventFlowable(filter);
    }

    @Deprecated
    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
                                         Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WinningTeamVoting(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
                                         TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WinningTeamVoting(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
                                         Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WinningTeamVoting(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
                                         TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WinningTeamVoting(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j, Credentials credentials,
                                                       ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j,
                                                       TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j, Credentials credentials,
                                                       BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j,
                                                       TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class BetPlacedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String user;

        public BigInteger teamId;

        public BigInteger amount;
    }

    public static class GameCreatedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public BigInteger teamAId;

        public BigInteger teamBId;

        public BigInteger startTime;

        public String teamATokenAddress;

        public String teamBTokenAddress;
    }

    public static class GameFinalizedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public BigInteger winningTeamId;
    }

    public static class GameTokenAddressesUpdatedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String newTeamATokenAddress;

        public String newTeamBTokenAddress;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RewardClaimedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String user;

        public BigInteger amount;
    }
}
