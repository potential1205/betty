package org.example.betty.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
//java 수정
/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class WinningTeamVoting extends Contract {
    public static final String BINARY = "0x60806040523461002757610011610037565b61001961002c565b6135a561021182396135a590f35b610032565b60405190565b600080fd5b610040336100aa565b565b90565b60018060a01b031690565b90565b61006761006261006c92610042565b610050565b610045565b90565b61007890610053565b90565b61008490610045565b90565b6100909061007b565b9052565b91906100a890600060208501940190610087565b565b806100c66100c06100bb600061006f565b61007b565b9161007b565b146100d6576100d4906101af565b565b6100fb6100e3600061006f565b6000918291631e4fbdf760e01b835260048301610094565b0390fd5b60001c90565b60018060a01b031690565b61011c610121916100ff565b610105565b90565b61012e9054610110565b90565b60001b90565b9061014860018060a01b0391610131565b9181191691161790565b61016661016161016b92610045565b610050565b610045565b90565b61017790610152565b90565b6101839061016e565b90565b90565b9061019e6101996101a59261017a565b610186565b8254610137565b9055565b60000190565b6101b96000610124565b6101c4826000610189565b906101f86101f27f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361017a565b9161017a565b9161020161002c565b8061020b816101a9565b0390a356fe60806040526004361015610013575b610b75565b61001e60003561014d565b8063117a5b901461014857806331da08e614610143578063324d32441461013e5780635aaab47e146101395780636ee3466314610134578063715018a61461012f5780638b3195a91461012a5780638b8ab821146101255780638da5cb5b14610120578063ae169a501461011b578063b6013cef14610116578063bb2b9dc514610111578063c03fb87c1461010c578063c13ecbb814610107578063e2ebeb9b14610102578063e71c9697146100fd578063e8a7a25b146100f8578063f2fde38b146100f35763f644b3bb0361000e57610b3c565b610a69565b610a10565b610977565b610907565b6108d1565b610898565b61082f565b6107fb565b6107c8565b610793565b610747565b610696565b610663565b61061f565b6105ae565b610535565b610460565b6103c6565b60e01c90565b60405190565b600080fd5b600080fd5b90565b61016f81610163565b0361017657565b600080fd5b9050359061018882610166565b565b906020828203126101a4576101a19160000161017b565b90565b61015e565b90565b6101c06101bb6101c592610163565b6101a9565b610163565b90565b906101d2906101ac565b600052602052604060002090565b60001c90565b90565b6101f56101fa916101e0565b6101e6565b90565b61020790546101e9565b90565b60ff1690565b61021c610221916101e0565b61020a565b90565b61022e9054610210565b90565b60018060a01b031690565b61024861024d916101e0565b610231565b90565b61025a905461023c565b90565b6102689060016101c8565b90610275600083016101fd565b91610282600182016101fd565b9161028f600283016101fd565b9161029c600382016101fd565b916102a9600483016101fd565b916102b6600582016101fd565b916102c360068301610224565b916102d0600782016101fd565b916102e960096102e260088501610250565b9301610250565b90565b6102f590610163565b9052565b151590565b610307906102f9565b9052565b60018060a01b031690565b61031f9061030b565b90565b61032b90610316565b9052565b979593919a9998969492909a61014089019b60008a0161034e916102ec565b6020890161035b916102ec565b60408801610368916102ec565b60608701610375916102ec565b60808601610382916102ec565b60a0850161038f916102ec565b60c0840161039c916102fe565b60e083016103a9916102ec565b61010082016103b791610322565b610120016103c491610322565b565b34610403576103ff6103e16103dc36600461018a565b61025d565b966103f69a989a969196959295949394610153565b9a8b9a8b61032f565b0390f35b610159565b61041181610316565b0361041857565b600080fd5b9050359061042a82610408565b565b91906040838203126104555780610449610452926000860161017b565b9360200161041d565b90565b61015e565b60000190565b3461048f5761047961047336600461042c565b90611335565b610481610153565b8061048b8161045a565b0390f35b610159565b5190565b60209181520190565b60200190565b6104b090610316565b9052565b906104c1816020936104a7565b0190565b60200190565b906104e86104e26104db84610494565b8093610498565b926104a1565b9060005b8181106104f95750505090565b90919261051261050c60019286516104b4565b946104c5565b91019190916104ec565b61053291602082019160008184039101526104cb565b90565b346105655761056161055061054b36600461018a565b6114a0565b610558610153565b9182918261051c565b0390f35b610159565b91906040838203126105935780610587610590926000860161017b565b9360200161017b565b90565b61015e565b91906105ac906000602085019401906102ec565b565b346105df576105db6105ca6105c436600461056a565b90611500565b6105d2610153565b91829182610598565b0390f35b610159565b909160608284031261061a57610617610600846000850161017b565b9361060e816020860161041d565b9360400161041d565b90565b61015e565b3461064e576106386106323660046105e4565b916117a9565b610640610153565b8061064a8161045a565b0390f35b610159565b600091031261065e57565b61015e565b3461069157610673366004610653565b61067b611804565b610683610153565b8061068d8161045a565b0390f35b610159565b346106c6576106c26106b16106ac36600461018a565b611826565b6106b9610153565b9182918261051c565b0390f35b610159565b906106d5906101ac565b600052602052604060002090565b906106ed906101ac565b600052602052604060002090565b1c90565b61070f90600861071493026106fb565b6101e6565b90565b9061072291546106ff565b90565b61073f6107449261073a6003936000946106cb565b6106e3565b610717565b90565b346107785761077461076361075d36600461056a565b90610725565b61076b610153565b91829182610598565b0390f35b610159565b919061079190600060208501940190610322565b565b346107c3576107a3366004610653565b6107bf6107ae6118b1565b6107b6610153565b9182918261077d565b0390f35b610159565b346107f6576107e06107db36600461018a565b6118c7565b6107e8610153565b806107f28161045a565b0390f35b610159565b3461082a5761081461080e36600461056a565b90611dfd565b61081c610153565b806108268161045a565b0390f35b610159565b346108605761085c61084b61084536600461056a565b90611e64565b610853610153565b91829182610598565b0390f35b610159565b60409061088f6108969496959396610885606084019860008501906102ec565b60208301906102ec565b01906102fe565b565b346108cc576108c86108b46108ae36600461042c565b90611f3b565b6108bf939193610153565b93849384610865565b0390f35b610159565b34610902576108fe6108ed6108e736600461056a565b90611fe4565b6108f5610153565b9182918261051c565b0390f35b610159565b346109375761093361092261091d36600461018a565b6120a0565b61092a610153565b9182918261051c565b0390f35b610159565b90916060828403126109725761096f610958846000850161017b565b93610966816020860161017b565b9360400161017b565b90565b61015e565b346109a65761099061098a36600461093c565b91612551565b610998610153565b806109a28161045a565b0390f35b610159565b909160c082840312610a0b576109c4836000840161017b565b926109d2816020850161017b565b926109e0826040830161017b565b92610a086109f1846060850161017b565b936109ff816080860161041d565b9360a00161041d565b90565b61015e565b34610a4557610a2f610a233660046109ab565b94939093929192612fba565b610a37610153565b80610a418161045a565b0390f35b610159565b90602082820312610a6457610a619160000161041d565b90565b61015e565b34610a9757610a81610a7c366004610a4a565b613032565b610a89610153565b80610a938161045a565b0390f35b610159565b90610aa6906101ac565b600052602052604060002090565b610ac8610ac3610acd9261030b565b6101a9565b61030b565b90565b610ad990610ab4565b90565b610ae590610ad0565b90565b90610af290610adc565b600052602052604060002090565b90610b0f610b14926002610a9c565b610ae8565b610b20600082016101fd565b91610b396002610b32600185016101fd565b9301610224565b90565b34610b7057610b6c610b58610b5236600461042c565b90610b00565b610b63939193610153565b93849384610865565b0390f35b610159565b600080fd5b90610b8c91610b8761303d565b610fe4565b565b90565b90565b60209181520190565b60007f47616d65206e6f742066696e616c697a65640000000000000000000000000000910152565b610bd26012602092610b94565b610bdb81610b9d565b0190565b610bf59060208101906000818303910152610bc5565b90565b15610bff57565b610c07610153565b62461bcd60e51b815280610c1d60048201610bdf565b0390fd5b90565b610c38610c33610c3d92610c21565b6101a9565b610163565b90565b60007f4e6f2062657420706c6163656400000000000000000000000000000000000000910152565b610c75600d602092610b94565b610c7e81610c40565b0190565b610c989060208101906000818303910152610c68565b90565b15610ca257565b610caa610153565b62461bcd60e51b815280610cc060048201610c82565b0390fd5b60007f52657761726420616c726561647920636c61696d656400000000000000000000910152565b610cf96016602092610b94565b610d0281610cc4565b0190565b610d1c9060208101906000818303910152610cec565b90565b15610d2657565b610d2e610153565b62461bcd60e51b815280610d4460048201610d06565b0390fd5b60001b90565b90610d5a60ff91610d48565b9181191691161790565b610d6d906102f9565b90565b90565b90610d88610d83610d8f92610d64565b610d70565b8254610d4e565b9055565b610d9c90610c24565b9052565b9190610db490600060208501940190610d93565b565b610dbf90610ab4565b90565b610dcb90610db6565b90565b610dd790610ad0565b90565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90610e0490610dda565b810190811067ffffffffffffffff821117610e1e57604052565b610de4565b60e01b90565b610e32816102f9565b03610e3957565b600080fd5b90505190610e4b82610e29565b565b90602082820312610e6757610e6491600001610e3e565b90565b61015e565b916020610e8e929493610e8760408201966000830190610322565b01906102ec565b565b610e98610153565b3d6000823e3d90fd5b60007f5472616e73666572206661696c65640000000000000000000000000000000000910152565b610ed6600f602092610b94565b610edf81610ea1565b0190565b610ef99060208101906000818303910152610ec9565b90565b15610f0357565b610f0b610153565b62461bcd60e51b815280610f2160048201610ee3565b0390fd5b634e487b7160e01b600052601160045260246000fd5b610f4a610f5091939293610163565b92610163565b8203918211610f5b57565b610f25565b60007f426f6e7573207472616e73666572206661696c65640000000000000000000000910152565b610f956015602092610b94565b610f9e81610f60565b0190565b610fb89060208101906000818303910152610f88565b90565b15610fc257565b610fca610153565b62461bcd60e51b815280610fe060048201610fa2565b0390fd5b610ff8610ff3600183906101c8565b610b8e565b9061101761101261100b60028490610a9c565b8590610ae8565b610b91565b61102b61102660068501610224565b610bf8565b61105361103a600083016101fd565b61104d6110476000610c24565b91610163565b11610c9b565b61107061106b61106560028401610224565b156102f9565b610d1f565b61107e600160028301610d73565b61108a600182016101fd565b6110a76110a161109c600787016101fd565b610163565b91610163565b146000146112de576110ba8285906131ba565b926110e16110dc6110d7856110d1600187016101fd565b90613458565b610dc2565b610dce565b90602063a9059cbb92879061111460006110fc8189016101fd565b9661111f611108610153565b98899687958694610e23565b845260048401610e6c565b03925af19182156112d95761119292611140916000916112ab575b50610efc565b61114c600184016101fd565b61116961116361115e600185016101fd565b610163565b91610163565b1460001461129a57600961117d9101610250565b5b9161118c60008692016101fd565b90610f3b565b90816111a76111a16000610c24565b91610163565b11611200575b50509190916111fa6111e86111e27f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7936101ac565b93610adc565b936111f1610153565b91829182610598565b0390a35b565b61121361120e602092610dc2565b610dce565b9163a9059cbb92611239600088939561124461122d610153565b97889687958694610e23565b845260048401610e6c565b03925af180156112955761126091600091611267575b50610fbb565b38806111ad565b611288915060203d811161128e575b6112808183610dfa565b810190610e4d565b3861125a565b503d611276565b610e90565b60086112a69101610250565b61117e565b6112cc915060203d81116112d2575b6112c48183610dfa565b810190610e4d565b3861113a565b503d6112ba565b610e90565b5090509060009161132d61131b6113157f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7936101ac565b93610adc565b93611324610153565b91829182610da0565b0390a36111fe565b9061133f91610b7a565b565b606090565b60007f47616d6520646f6573206e6f7420657869737400000000000000000000000000910152565b61137b6013602092610b94565b61138481611346565b0190565b61139e906020810190600081830391015261136e565b90565b156113a857565b6113b0610153565b62461bcd60e51b8152806113c660048201611388565b0390fd5b906113d4906101ac565b600052602052604060002090565b5490565b60209181520190565b600052602060002090565b611404905461023c565b90565b60010190565b9061142a61142461141d846113e2565b80936113e6565b926113ef565b9060005b81811061143b5750505090565b90919261145b611455600192611450876113fa565b6104b4565b94611407565b910191909161142e565b9061146f9161140d565b90565b9061149261148b92611482610153565b93848092611465565b0383610dfa565b565b61149d90611472565b90565b6114f36114f8916114af611341565b506114ec6114d260006114cc6114c7600186906101c8565b610b8e565b016101fd565b6114e56114df6000610c24565b91610163565b14156113a1565b60046113ca565b611494565b90565b600090565b6115259161151b611520926115136114fb565b5060036106cb565b6106e3565b6101fd565b90565b9061153b929161153661303d565b611683565b565b60007f47616d6520616c72656164792066696e616c697a656400000000000000000000910152565b6115726016602092610b94565b61157b8161153d565b0190565b6115959060208101906000818303910152611565565b90565b1561159f57565b6115a7610153565b62461bcd60e51b8152806115bd6004820161157f565b0390fd5b60007f4265747320616c726561647920706c6163656400000000000000000000000000910152565b6115f66013602092610b94565b6115ff816115c1565b0190565b61161990602081019060008183039101526115e9565b90565b1561162357565b61162b610153565b62461bcd60e51b81528061164160048201611603565b0390fd5b9061165660018060a01b0391610d48565b9181191691161790565b90565b9061167861167361167f92610adc565b611660565b8254611645565b9055565b91909161172961169d611698600184906101c8565b610b8e565b6116c66116ac600083016101fd565b6116bf6116b96000610c24565b91610163565b14156113a1565b6116e36116de6116d860068401610224565b156102f9565b611598565b6116ef600482016101fd565b6117026116fc6000610c24565b91610163565b148061177e575b6117129061161c565b61171f8560088301611663565b6009849101611663565b9161176661176061175a7f94fccb7efe5ad46d10196a1839ad9a1a0ab045594ea002398eeeb645f6073939956101ac565b92610adc565b92610adc565b9261176f610153565b806117798161045a565b0390a4565b5061171261178e600583016101fd565b6117a161179b6000610c24565b91610163565b149050611709565b906117b49291611528565b565b6117be61303d565b6117c66117f0565b565b6117dc6117d76117e192610c21565b6101a9565b61030b565b90565b6117ed906117c8565b90565b6118026117fd60006117e4565b613501565b565b61180c6117b6565b565b90611818906101ac565b600052602052604060002090565b6118a46118a991611835611341565b5061189e600761189761185261184d600186906101c8565b610b8e565b9361187c611862600087016101fd565b61187561186f6000610c24565b91610163565b14156113a1565b61189061188b60068701610224565b610bf8565b600561180e565b92016101fd565b906113ca565b611494565b90565b600090565b6118b96118ac565b506118c46000610250565b90565b6118db6118d6600183906101c8565b610b8e565b906118fa6118f56118ee60028490610a9c565b3390610ae8565b610b91565b61190e61190960068501610224565b610bf8565b61193661191d600083016101fd565b61193061192a6000610c24565b91610163565b11610c9b565b61195361194e61194860028401610224565b156102f9565b610d1f565b611961600160028301610d73565b61196d600182016101fd565b61198a61198461197f600787016101fd565b610163565b91610163565b14600014611bc25761199d8233906131ba565b926119c46119bf6119ba856119b4600187016101fd565b90613458565b610dc2565b610dce565b90602063a9059cbb9233906119f760006119df8189016101fd565b96611a026119eb610153565b98899687958694610e23565b845260048401610e6c565b03925af1918215611bbd57611a7592611a2391600091611b8f575b50610efc565b611a2f600184016101fd565b611a4c611a46611a41600185016101fd565b610163565b91610163565b14600014611b7e576009611a609101610250565b5b91611a6f60008692016101fd565b90610f3b565b9081611a8a611a846000610c24565b91610163565b11611ae4575b505090339091611ade611acc611ac67f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7936101ac565b93610adc565b93611ad5610153565b91829182610598565b0390a35b565b611af7611af2602092610dc2565b610dce565b9163a9059cbb92611b1d6000339395611b28611b11610153565b97889687958694610e23565b845260048401610e6c565b03925af18015611b7957611b4491600091611b4b575b50610fbb565b3880611a90565b611b6c915060203d8111611b72575b611b648183610dfa565b810190610e4d565b38611b3e565b503d611b5a565b610e90565b6008611b8a9101610250565b611a61565b611bb0915060203d8111611bb6575b611ba88183610dfa565b810190610e4d565b38611a1d565b503d611b9e565b610e90565b50905033600091611c11611bff611bf97f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7936101ac565b93610adc565b93611c08610153565b91829182610da0565b0390a3611ae2565b90611c2b91611c2661303d565b611ceb565b565b60007f496e76616c69642077696e6e696e67207465616d000000000000000000000000910152565b611c626014602092610b94565b611c6b81611c2d565b0190565b611c859060208101906000818303910152611c55565b90565b15611c8f57565b611c97610153565b62461bcd60e51b815280611cad60048201611c6f565b0390fd5b90611cbe60001991610d48565b9181191691161790565b90565b90611ce0611cdb611ce7926101ac565b611cc8565b8254611cb1565b9055565b611d8f611d02611cfd600184906101c8565b610b8e565b611d2b611d11600083016101fd565b611d24611d1e6000610c24565b91610163565b14156113a1565b611d48611d43611d3d60068401610224565b156102f9565b611598565b83611d66611d60611d5b600185016101fd565b610163565b91610163565b148015611dd3575b611d7790611c88565b611d85600160068301610d73565b6007849101611ccb565b611dce611dbc7f8a5377eea8cb863d6ed1fe569a6e8072b9f18231b6a1902e256a1cb5fe87e6f1926101ac565b92611dc5610153565b91829182610598565b0390a2565b50611d7784611df5611def611dea600286016101fd565b610163565b91610163565b149050611d6e565b90611e0791611c19565b565b60007f496e76616c6964207465616d0000000000000000000000000000000000000000910152565b611e3e600c602092610b94565b611e4781611e09565b0190565b611e619060208101906000818303910152611e31565b90565b611e7b611e8091611e736114fb565b5060016101c8565b610b8e565b90611eaa611e90600084016101fd565b611ea3611e9d6000610c24565b91610163565b14156113a1565b80611ec8611ec2611ebd600186016101fd565b610163565b91610163565b14600014611ee057506004611edd91016101fd565b90565b611efd611ef7611ef2600285016101fd565b610163565b91610163565b14600014611f14576005611f1191016101fd565b90565b611f1c610153565b62461bcd60e51b815280611f3260048201611e4b565b0390fd5b600090565b91611f446114fb565b50611f4d6114fb565b50611f56611f36565b50611fb56002611faf611f7f6000611f79611f72858a90610a9c565b8890610ae8565b016101fd565b94611faa611fa36001611f9d611f96878c90610a9c565b8590610ae8565b016101fd565b9784610a9c565b610ae8565b01610224565b91929190565b15611fc257565b611fca610153565b62461bcd60e51b815280611fe060048201611e4b565b0390fd5b6120769161206c61207192611ff7611341565b5061206561200f61200a600184906101c8565b610b8e565b61203861201e600083016101fd565b61203161202b6000610c24565b91610163565b14156113a1565b8461205661205061204b600185016101fd565b610163565b91610163565b14908115612079575b50611fbb565b600561180e565b6113ca565b611494565b90565b905061209961209361208e60028894016101fd565b610163565b91610163565b143861205f565b61214f612154916120af611341565b5061214a6120c76120c2600184906101c8565b610b8e565b6120f06120d6600083016101fd565b6120e96120e36000610c24565b91610163565b14156113a1565b6121046120ff60068301610224565b610bf8565b612110600782016101fd565b61212d612127612122600185016101fd565b610163565b91610163565b1460001461215757600261214191016101fd565b5b91600561180e565b6113ca565b611494565b90565b600161216391016101fd565b612142565b60007f42657474696e6720636c6f736564000000000000000000000000000000000000910152565b61219d600e602092610b94565b6121a681612168565b0190565b6121c09060208101906000818303910152612190565b90565b156121ca57565b6121d2610153565b62461bcd60e51b8152806121e8600482016121aa565b0390fd5b60007f416c726561647920626574000000000000000000000000000000000000000000910152565b612221600b602092610b94565b61222a816121ec565b0190565b6122449060208101906000818303910152612214565b90565b1561224e57565b612256610153565b62461bcd60e51b81528061226c6004820161222e565b0390fd5b60007f416d6f756e74206d7573742062652067726561746572207468616e2030000000910152565b6122a5601d602092610b94565b6122ae81612270565b0190565b6122c89060208101906000818303910152612298565b90565b156122d257565b6122da610153565b62461bcd60e51b8152806122f0600482016122b2565b0390fd5b61230361230991939293610163565b92610163565b820180921161231457565b610f25565b61232290610163565b60001981146123315760010190565b610f25565b90565b600052602060002090565b634e487b7160e01b600052603260045260246000fd5b5490565b6123678161235a565b82101561238257612379600191612339565b91020190600090565b612344565b1b90565b919060086123ab9102916123a560018060a01b0384612387565b92612387565b9181191691161790565b91906123cb6123c66123d393610adc565b611660565b90835461238b565b9055565b908154916801000000000000000083101561240757826123ff9160016124059501815561235e565b906123b5565b565b610de4565b90612416906101ac565b600052602052604060002090565b9061242e90610adc565b600052602052604060002090565b61244590610ad0565b90565b604090612472612479949695939661246860608401986000850190610322565b6020830190610322565b01906102ec565b565b9061248e612487610153565b9283610dfa565b565b61249a606061247b565b90565b906124a790610163565b9052565b906124b5906102f9565b9052565b6124c39051610163565b90565b6124d090516102f9565b90565b906125196040600261251f946124f8600082016124f2600088016124b9565b90611ccb565b6125116001820161250b602088016124b9565b90611ccb565b0192016124c6565b90610d73565b565b9061252b916124d3565b565b91602061254f929493612548604082019660008301906102ec565b01906102ec565b565b61276261275d61256b612566600185906101c8565b610b8e565b61259461257a600083016101fd565b61258d6125876000610c24565b91610163565b14156113a1565b6125bb426125b56125af6125aa600386016101fd565b610163565b91610163565b106121c3565b6125d86125d36125cd60068401610224565b156102f9565b611598565b846125f66125f06125eb600185016101fd565b610163565b91610163565b148015612970575b61260790611fbb565b61264461262b600061262561261e60028990610a9c565b3390610ae8565b016101fd565b61263e6126386000610c24565b91610163565b14612247565b6126618661265b6126556000610c24565b91610163565b116122cb565b6126696118ac565b508461268861268261267d600185016101fd565b610163565b91610163565b146000146128d05761272b61272461271f6126a560088501610250565b936126c68a6126c060048401916126bb836101fd565b6122f4565b90611ccb565b6127016126ea6126d860038b906106cb565b6126e4600185016101fd565b906106e3565b6126fb6126f6826101fd565b612319565b90611ccb565b612719600161271260058b9061180e565b92016101fd565b906113ca565b612336565b33906123d7565b5b61275361274d6127486127416006889061240c565b3390612424565b610224565b156102f9565b61288d575b610dc2565b610dce565b60206323b872dd913390612793600061277a3061243c565b9561279e8a612787610153565b98899788968795610e23565b855260048501612448565b03925af18015612888576127ba9160009161285a575b50610efc565b61280a836127ef846127e66000916127dd6127d3612490565b956000870161249d565b6020850161249d565b604083016124ab565b6128056127fe60028590610a9c565b3390610ae8565b612521565b33919261284061283a7f1b8a9031cb9351278d70a994f81536e9e08c91162e64f92b2fe4766fb7a891b4936101ac565b93610adc565b9361285561284c610153565b9283928361252d565b0390a3565b61287b915060203d8111612881575b6128738183610dfa565b810190610e4d565b386127b4565b503d612869565b610e90565b6128ab6128a461289f600487906113ca565b612336565b33906123d7565b6128cb60016128c66128bf6006889061240c565b3390612424565b610d73565b612758565b61296b61296461295f6128e560098501610250565b936129068a61290060058401916128fb836101fd565b6122f4565b90611ccb565b61294161292a61291860038b906106cb565b612924600285016101fd565b906106e3565b61293b612936826101fd565b612319565b90611ccb565b612959600261295260058b9061180e565b92016101fd565b906113ca565b612336565b33906123d7565b61272c565b506126078561299261298c612987600286016101fd565b610163565b91610163565b1490506125fe565b906129b095949392916129ab61303d565b612dc7565b565b60007f47616d6520616c72656164792065786973747300000000000000000000000000910152565b6129e76013602092610b94565b6129f0816129b2565b0190565b612a0a90602081019060008183039101526129da565b90565b15612a1457565b612a1c610153565b62461bcd60e51b815280612a32600482016129f4565b0390fd5b60007f5465616d73206d75737420626520646966666572656e74000000000000000000910152565b612a6b6017602092610b94565b612a7481612a36565b0190565b612a8e9060208101906000818303910152612a5e565b90565b15612a9857565b612aa0610153565b62461bcd60e51b815280612ab660048201612a78565b0390fd5b60007f53746172742074696d65206d75737420626520696e2074686520667574757265910152565b612aee60208092610b94565b612af781612aba565b0190565b612b119060208101906000818303910152612ae2565b90565b15612b1b57565b612b23610153565b62461bcd60e51b815280612b3960048201612afb565b0390fd5b60007f496e76616c6964207465616d204120746f6b656e206164647265737300000000910152565b612b72601c602092610b94565b612b7b81612b3d565b0190565b612b959060208101906000818303910152612b65565b90565b15612b9f57565b612ba7610153565b62461bcd60e51b815280612bbd60048201612b7f565b0390fd5b60007f496e76616c6964207465616d204220746f6b656e206164647265737300000000910152565b612bf6601c602092610b94565b612bff81612bc1565b0190565b612c199060208101906000818303910152612be9565b90565b15612c2357565b612c2b610153565b62461bcd60e51b815280612c4160048201612c03565b0390fd5b612c5061014061247b565b90565b90612c5d90610316565b9052565b612c6b9051610316565b90565b90612d656101206009612d6b94612c9460008201612c8e600088016124b9565b90611ccb565b612cad60018201612ca7602088016124b9565b90611ccb565b612cc660028201612cc0604088016124b9565b90611ccb565b612cdf60038201612cd9606088016124b9565b90611ccb565b612cf860048201612cf2608088016124b9565b90611ccb565b612d1160058201612d0b60a088016124b9565b90611ccb565b612d2a60068201612d2460c088016124c6565b90610d73565b612d4360078201612d3d60e088016124b9565b90611ccb565b612d5d60088201612d576101008801612c61565b90611663565b019201612c61565b90611663565b565b90612d7791612c6e565b565b90959492612dc594612db4612dbe92612daa608096612da060a088019c60008901906102ec565b60208701906102ec565b60408501906102ec565b6060830190610322565b0190610322565b565b9392919093600181612dd8916101c8565b600001612de4906101fd565b6000612def90610c24565b90612df990610163565b14612e0390612a0d565b8482612e0e90610163565b90612e1890610163565b1415612e2390612a91565b8242612e2e90610163565b90612e3890610163565b11612e4290612b14565b836000612e4e906117e4565b612e5790610316565b90612e6190610316565b1415612e6c90612b98565b856000612e78906117e4565b612e8190610316565b90612e8b90610316565b1415612e9690612c1c565b80858784866000806000926000948c9697612eaf612c45565b9960008b0190612ebe9161249d565b60208a0190612ecc9161249d565b6040890190612eda9161249d565b6060880190612ee89161249d565b612ef190610c24565b6080870190612eff9161249d565b612f0890610c24565b60a0860190612f169161249d565b60c0850190612f24916124ab565b612f2d90610c24565b60e0840190612f3b9161249d565b610100830190612f4a91612c53565b610120820190612f5991612c53565b600182612f65916101c8565b90612f6f91612d6d565b93909192947f6db547cf519631ba05cab5a13d9722f560572f134012d0acc87728bfaaa3e8f794612f9f906101ac565b95612fa8610153565b948594612fb59486612d79565b0390a2565b90612fc8959493929161299a565b565b612fdb90612fd661303d565b612fdd565b565b80612ff9612ff3612fee60006117e4565b610316565b91610316565b146130095761300790613501565b565b61302e61301660006117e4565b6000918291631e4fbdf760e01b83526004830161077d565b0390fd5b61303b90612fca565b565b6130456118b1565b61305e613058613053613562565b610316565b91610316565b0361306557565b613088613070613562565b600091829163118cdaa760e01b83526004830161077d565b0390fd5b60007f5573657220646964206e6f7420626574206f6e2077696e6e696e67207465616d910152565b6130c060208092610b94565b6130c98161308c565b0190565b6130e390602081019060008183039101526130b4565b90565b156130ed57565b6130f5610153565b62461bcd60e51b81528061310b600482016130cd565b0390fd5b90565b61312661312161312b9261310f565b6101a9565b610163565b90565b61313d61314391939293610163565b92610163565b9161314f838202610163565b92818404149015171561315e57565b610f25565b90565b61317a61317561317f92613163565b6101a9565b610163565b90565b634e487b7160e01b600052601260045260246000fd5b6131a46131aa91610163565b91610163565b9081156131b5570490565b613182565b6131c26114fb565b506131f46131ef6131dd6131d8600185906101c8565b610b8e565b936131ea60028590610a9c565b610ae8565b610b91565b9061320961320460068501610224565b610bf8565b61323b613218600184016101fd565b61323561322f61322a600788016101fd565b610163565b91610163565b146130e6565b6132436114fb565b5061324c6114fb565b506132556114fb565b50613262600784016101fd565b61327f613279613274600187016101fd565b610163565b91610163565b14600014613412576132c86132c3613299600486016101fd565b946132bd60016132b66132ae600585016101fd565b9660036106cb565b92016101fd565b906106e3565b6101fd565b5b836132dd6132d76000610c24565b91610163565b1480156133f7575b6133e557613354936132f76000610c24565b918061330c6133066000610c24565b91610163565b116133ac575b5061331d6000610c24565b928161333261332c6000610c24565b91610163565b11613357575b505061334a600061334f9394016101fd565b6122f4565b6122f4565b90565b61334f93506133a561334a926133a061338f61337f6000956133796032613112565b9061312e565b6133896064613166565b90613198565b61339a858a016101fd565b9061312e565b613198565b9350613338565b6133de9192506133d96133c9856133c36032613112565b9061312e565b6133d36064613166565b90613198565b613198565b9038613312565b50506133f491506000016101fd565b90565b508061340c6134066000610c24565b91610163565b146132e5565b61345361344e613424600586016101fd565b946134486002613441613439600485016101fd565b9660036106cb565b92016101fd565b906106e3565b6101fd565b6132c9565b61346f613474916134676118ac565b5060016101c8565b610b8e565b908061349361348d613488600186016101fd565b610163565b91610163565b146000146134ab575060086134a89101610250565b90565b6134c86134c26134bd600285016101fd565b610163565b91610163565b146000146134df5760096134dc9101610250565b90565b6134e7610153565b62461bcd60e51b8152806134fd60048201611e4b565b0390fd5b61350b6000610250565b613516826000611663565b9061354a6135447f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610adc565b91610adc565b91613553610153565b8061355d8161045a565b0390a3565b61356a6118ac565b50339056fea26469706673582212201c4b8672a0b8893bfde04cdf713c15879fcf7961f81b3d4f5df0b70ad8d2445864736f6c634300081c0033\r\n";

    private static String librariesLinkedBinary;

    public static final String FUNC_BETS = "bets";

    public static final String FUNC_CLAIMFORUSER = "claimForUser";

    public static final String FUNC_CLAIMREWARD = "claimReward";

    public static final String FUNC_CREATEGAME = "createGame";

    public static final String FUNC_FINALIZE = "finalize";

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_GETALLGAMEBETTORS = "getAllGameBettors";

    public static final String FUNC_GETLOSINGTEAMBETTORS = "getLosingTeamBettors";

    public static final String FUNC_GETTEAMBETS = "getTeamBets";

    public static final String FUNC_GETTEAMBETTERSCOUNT = "getTeamBettersCount";

    public static final String FUNC_GETTEAMBETTORS = "getTeamBettors";

    public static final String FUNC_GETUSERBET = "getUserBet";

    public static final String FUNC_GETWINNINGTEAMBETTORS = "getWinningTeamBettors";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PLACEBET = "placeBet";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TEAMBETCOUNTS = "teamBetCounts";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEGAMETOKENADDRESSES = "updateGameTokenAddresses";

    public static final Event BETPLACED_EVENT = new Event("BetPlaced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMECREATED_EVENT = new Event("GameCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event GAMEFINALIZED_EVENT = new Event("GameFinalized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMETOKENADDRESSESUPDATED_EVENT = new Event("GameTokenAddressesUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REWARDCLAIMED_EVENT = new Event("RewardClaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected WinningTeamVoting(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WinningTeamVoting(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WinningTeamVoting(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WinningTeamVoting(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> bets(BigInteger param0,
            String param1) {
        final Function function = new Function(FUNC_BETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> claimForUser(BigInteger gameId, String user) {
        final Function function = new Function(
                FUNC_CLAIMFORUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimReward(BigInteger gameId) {
        final Function function = new Function(
                FUNC_CLAIMREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createGame(BigInteger gameId, BigInteger teamAId,
            BigInteger teamBId, BigInteger startTime, String teamATokenAddress,
            String teamBTokenAddress) {
        final Function function = new Function(
                FUNC_CREATEGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(teamAId), 
                new org.web3j.abi.datatypes.generated.Uint256(teamBId), 
                new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                new org.web3j.abi.datatypes.Address(160, teamATokenAddress), 
                new org.web3j.abi.datatypes.Address(160, teamBTokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalize(BigInteger gameId,
            BigInteger winningTeamId) {
        final Function function = new Function(
                FUNC_FINALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(winningTeamId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>> games(
            BigInteger param0) {
        final Function function = new Function(FUNC_GAMES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>>(function,
                new Callable<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>>() {
                    @Override
                    public Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (String) results.get(9).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getAllGameBettors(BigInteger gameId) {
        final Function function = new Function(FUNC_GETALLGAMEBETTORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getLosingTeamBettors(BigInteger gameId) {
        final Function function = new Function(FUNC_GETLOSINGTEAMBETTORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTeamBets(BigInteger gameId, BigInteger teamId) {
        final Function function = new Function(FUNC_GETTEAMBETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(teamId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTeamBettersCount(BigInteger gameId,
            BigInteger teamId) {
        final Function function = new Function(FUNC_GETTEAMBETTERSCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(teamId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getTeamBettors(BigInteger gameId, BigInteger teamId) {
        final Function function = new Function(FUNC_GETTEAMBETTORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(teamId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> getUserBet(BigInteger gameId,
            String user) {
        final Function function = new Function(FUNC_GETUSERBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getWinningTeamBettors(BigInteger gameId) {
        final Function function = new Function(FUNC_GETWINNINGTEAMBETTORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> placeBet(BigInteger gameId, BigInteger teamId,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_PLACEBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.generated.Uint256(teamId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> teamBetCounts(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_TEAMBETCOUNTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateGameTokenAddresses(BigInteger gameId,
            String newTeamATokenAddress, String newTeamBTokenAddress) {
        final Function function = new Function(
                FUNC_UPDATEGAMETOKENADDRESSES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameId), 
                new org.web3j.abi.datatypes.Address(160, newTeamATokenAddress), 
                new org.web3j.abi.datatypes.Address(160, newTeamBTokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<BetPlacedEventResponse> getBetPlacedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BETPLACED_EVENT, transactionReceipt);
        ArrayList<BetPlacedEventResponse> responses = new ArrayList<BetPlacedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BetPlacedEventResponse typedResponse = new BetPlacedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.teamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BetPlacedEventResponse getBetPlacedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BETPLACED_EVENT, log);
        BetPlacedEventResponse typedResponse = new BetPlacedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.teamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BetPlacedEventResponse> betPlacedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBetPlacedEventFromLog(log));
    }

    public Flowable<BetPlacedEventResponse> betPlacedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BETPLACED_EVENT));
        return betPlacedEventFlowable(filter);
    }

    public static List<GameCreatedEventResponse> getGameCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMECREATED_EVENT, transactionReceipt);
        ArrayList<GameCreatedEventResponse> responses = new ArrayList<GameCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.teamAId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.teamBId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.teamATokenAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.teamBTokenAddress = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameCreatedEventResponse getGameCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMECREATED_EVENT, log);
        GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.teamAId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.teamBId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.teamATokenAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.teamBTokenAddress = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameCreatedEventFromLog(log));
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMECREATED_EVENT));
        return gameCreatedEventFlowable(filter);
    }

    public static List<GameFinalizedEventResponse> getGameFinalizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMEFINALIZED_EVENT, transactionReceipt);
        ArrayList<GameFinalizedEventResponse> responses = new ArrayList<GameFinalizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameFinalizedEventResponse typedResponse = new GameFinalizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.winningTeamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameFinalizedEventResponse getGameFinalizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMEFINALIZED_EVENT, log);
        GameFinalizedEventResponse typedResponse = new GameFinalizedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.winningTeamId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<GameFinalizedEventResponse> gameFinalizedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameFinalizedEventFromLog(log));
    }

    public Flowable<GameFinalizedEventResponse> gameFinalizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMEFINALIZED_EVENT));
        return gameFinalizedEventFlowable(filter);
    }

    public static List<GameTokenAddressesUpdatedEventResponse> getGameTokenAddressesUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMETOKENADDRESSESUPDATED_EVENT, transactionReceipt);
        ArrayList<GameTokenAddressesUpdatedEventResponse> responses = new ArrayList<GameTokenAddressesUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameTokenAddressesUpdatedEventResponse typedResponse = new GameTokenAddressesUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newTeamATokenAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newTeamBTokenAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameTokenAddressesUpdatedEventResponse getGameTokenAddressesUpdatedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMETOKENADDRESSESUPDATED_EVENT, log);
        GameTokenAddressesUpdatedEventResponse typedResponse = new GameTokenAddressesUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newTeamATokenAddress = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newTeamBTokenAddress = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<GameTokenAddressesUpdatedEventResponse> gameTokenAddressesUpdatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameTokenAddressesUpdatedEventFromLog(log));
    }

    public Flowable<GameTokenAddressesUpdatedEventResponse> gameTokenAddressesUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMETOKENADDRESSESUPDATED_EVENT));
        return gameTokenAddressesUpdatedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RewardClaimedEventResponse> getRewardClaimedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REWARDCLAIMED_EVENT, transactionReceipt);
        ArrayList<RewardClaimedEventResponse> responses = new ArrayList<RewardClaimedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RewardClaimedEventResponse typedResponse = new RewardClaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RewardClaimedEventResponse getRewardClaimedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REWARDCLAIMED_EVENT, log);
        RewardClaimedEventResponse typedResponse = new RewardClaimedEventResponse();
        typedResponse.log = log;
        typedResponse.gameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RewardClaimedEventResponse> rewardClaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRewardClaimedEventFromLog(log));
    }

    public Flowable<RewardClaimedEventResponse> rewardClaimedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REWARDCLAIMED_EVENT));
        return rewardClaimedEventFlowable(filter);
    }

    @Deprecated
    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WinningTeamVoting(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WinningTeamVoting(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WinningTeamVoting(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WinningTeamVoting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WinningTeamVoting(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WinningTeamVoting> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WinningTeamVoting.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }


    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class BetPlacedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String user;

        public BigInteger teamId;

        public BigInteger amount;
    }

    public static class GameCreatedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public BigInteger teamAId;

        public BigInteger teamBId;

        public BigInteger startTime;

        public String teamATokenAddress;

        public String teamBTokenAddress;
    }

    public static class GameFinalizedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public BigInteger winningTeamId;
    }

    public static class GameTokenAddressesUpdatedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String newTeamATokenAddress;

        public String newTeamBTokenAddress;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RewardClaimedEventResponse extends BaseEventResponse {
        public BigInteger gameId;

        public String user;

        public BigInteger amount;
    }
}
